controller:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 20
    minReplicas: 2
    targetCPUUtilizationPercentage: 80
  config: {}
  containerPort:
    http: 80
    https: 443
    stat: 1024
  daemonset:
    hostPorts:
      http: 80
      https: 443
      stat: 1024
    useHostNetwork: false
    useHostPort: false
  defaultTLSSecret:
    enabled: true
    secret: null
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  extraArgs: []
  extraContainers: []
  extraEnvs: []
  extraLabels: {}
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullPolicy: IfNotPresent
    repository: haproxytech/kubernetes-ingress
    tag: '{{ .Chart.AppVersion }}'
  imageCredentials:
    password: null
    registry: null
    username: null
  ingressClass: null
  initContainers: []
  kind: Deployment
  lifecycle: {}
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 0
    path: /healthz
    periodSeconds: 10
    port: 1042
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  logging:
    level: info
    traffic: {}
  name: controller
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  publishService:
    enabled: false
    pathOverride: ""
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 0
    path: /healthz
    periodSeconds: 10
    port: 1042
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 2
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
  service:
    annotations: {}
    enablePorts:
      http: true
      https: true
      stat: true
    enabled: true
    externalIPs: []
    healthCheckNodePort: 0
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts: {}
    ports:
      http: 80
      https: 443
      stat: 1024
    targetPorts:
      http: http
      https: https
      stat: stat
    tcpPorts: []
    type: NodePort
  serviceMonitor:
    enabled: false
    endpoints:
    - path: /metrics
      port: stat
      scheme: http
    extraLabels: {}
  startupProbe:
    failureThreshold: 20
    initialDelaySeconds: 0
    path: /healthz
    periodSeconds: 1
    port: 1042
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 1
  strategy: {}
  terminationGracePeriodSeconds: 60
  tolerations: []
  unprivileged: false
defaultBackend:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 2
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  containerPort: 8080
  enabled: true
  extraEnvs: []
  image:
    pullPolicy: IfNotPresent
    repository: k8s.gcr.io/defaultbackend-amd64
    runAsUser: 65534
    tag: 1.5
  name: default-backend
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  replicaCount: 2
  resources:
    requests:
      cpu: 10m
      memory: 16Mi
  service:
    port: 8080
  serviceAccount:
    create: true
  tolerations: []
podSecurityPolicy:
  annotations: {}
  enabled: false
rbac:
  create: true
serviceAccount:
  create: true
  name: null
