{{- if and (.Values.deployCluster) (or (not (lookup "apps/v1" "DaemonSet" "kube-system" "portworx")) (default true .Values.generateStorageClusterForMigration)) }}

  {{- $isCoreOS := .Values.isTargetOSCoreOS | default false }}
  {{- $internalKVDB := .Values.internalKVDB | default false }}
  {{- $etcdEndPoints := .Values.etcdEndPoint }}
  {{- $etcdCertPath := .Values.etcd.certPath | default "none" }}
  {{- $etcdCert := .Values.etcd.cert | default "none" }}
  {{- $etcdKey := .Values.etcd.key | default "none" }}
  {{- $kvdbAuthSecret := .Values.kvdb.authSecretName | default "none" }}
  {{- $openshiftInstall := .Values.openshiftInstall | default false }}
  {{- $EKSInstall := .Values.EKSInstall | default false }}
  {{- $GKEInstall := .Values.GKEInstall | default false }}
  {{- $pksInstall := .Values.pksInstall | default false }}
  {{- $AKSInstall := .Values.AKSInstall | default false }}
  {{- $OKEInstall := .Values.OKEInstall | default false }}
  {{- $usefileSystemDrive := .Values.usefileSystemDrive | default false }}
  {{- $usedrivesAndPartitions := .Values.usedrivesAndPartitions | default false }}
  {{- $secretType := .Values.secretType | default "k8s" }}
  {{- $deployEnvironmentIKS := .Capabilities.KubeVersion.GitVersion | regexMatch "IKS" }}
  {{- $drives := .Values.drives | default "none" }}
  {{- $dataInterface := .Values.dataInterface | default "none" }}
  {{- $managementInterface := .Values.managementInterface | default "none" }}
  {{- $envVars := .Values.envVars | default "none" }}
  {{- $customRegistryURL := .Values.customRegistryURL | default "none" }}
  {{- $registrySecret := .Values.registrySecret | default "none" }}
  {{- $licenseSecret := .Values.licenseSecret | default "none" }}
  {{- $kvdbDevice := .Values.kvdbDevice | default "none" }}
  {{- $journalDevice := .Values.journalDevice | default "none" }}
  {{- $cacheDevices := .Values.cacheDevices | default "none"}}
  {{- $systemMetadataDevice:= .Values.systemMetadataDevice | default "none"}}
  {{- $miscArgs := include "px.miscArgs" . }}
  {{- $volumesPresent := include "px.volumesPresent" . }}
  {{- $storagePodAnnotations := .Values.customMetadata.annotations.pod.storage }}
  {{- $portworxApiServiceAnnotations := .Values.customMetadata.annotations.service.portworxApi }}
  {{- $portworxServiceAnnotations := .Values.customMetadata.annotations.service.portworxService }}
  {{- $kvdbServiceAnnotations := .Values.customMetadata.annotations.service.portworxKVDBService }}
  {{- $portworxApiServiceLabels := .Values.customMetadata.labels.service.portworxApi}}

  {{- $prometheus := .Values.monitoring.prometheus}}
  {{- $prometheousRetention := .Values.monitoring.prometheus.retention | default "none"}}
  {{- $prometheousRetentionSize := .Values.monitoring.prometheus.retentionSize | default "none"}}

kind: StorageCluster
apiVersion: core.libopenstorage.org/v1
metadata:
  name: "{{ required "Clustername cannot be empty" .Values.clusterName }}"
  namespace: {{ template "px.getDeploymentNamespace" . }}
  annotations:
    {{- if eq $openshiftInstall true }}
    portworx.io/is-openshift: "true"
    {{- end }}
    {{- if eq $pksInstall true }}
    portworx.io/is-pks: "true"
    {{- end }}
    {{- if eq $EKSInstall true }}
    portworx.io/is-eks: "true"
    {{- end }}
    {{- if eq $GKEInstall true }}
    portworx.io/is-gke: "true"
    {{- end }}
    {{- if eq $AKSInstall true }}
    portworx.io/is-aks: "true"
    {{- end }}
    {{- if eq $OKEInstall true }}
    portworx.io/is-oke: "true"
    {{- end }}
    {{- if $miscArgs }}
    portworx.io/misc-args: {{ $miscArgs | quote }}
    {{- end }}
    {{- if eq .Values.disableStorageClass true }}
    portworx.io/disable-storage-class: "true"
    {{- end }}
    {{- if and (ne .Values.serviceType "") (ne .Values.serviceType "none") }}
    portworx.io/service-type: {{ .Values.serviceType | quote }}
    {{- end }}
    {{- if (lookup "apps/v1" "DaemonSet" "kube-system" "portworx") }}
    portworx.io/migration-approved: "false"
    {{- end }}
    {{- if eq .Values.nonDisruptivek8sUpgrade true }}
    portworx.io/disable-non-disruptive-upgrade: "false"
    {{- end }}
    {{- if eq .Values.skipHealthChecks true }}
    portworx.io/health-check: "skip"
    {{- end }}
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
spec:
  image: portworx/oci-monitor:{{ required "A valid Image tag is required in the SemVer format" .Values.imageVersion }}
  imagePullPolicy: Always
  {{- if not (eq $customRegistryURL "none") }}
  customImageRegistry: {{ $customRegistryURL }}
  {{- end }}
  {{- if not (eq $registrySecret "none") }}
  imagePullSecret: {{ $registrySecret }}
  {{- end }}

  {{- if (or (eq (toString .Values.updateStrategy.type) "RollingUpdate") (eq (toString .Values.updateStrategy.type) "OnDelete")) }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}

    {{- if eq .Values.updateStrategy.type "RollingUpdate"}}
    rollingUpdate:
      {{- if .Values.updateStrategy.maxUnavailable}}
      maxUnavailable: {{.Values.updateStrategy.maxUnavailable}}
      {{- end}}
      {{- if .Values.updateStrategy.minReadySeconds}}
      minReadySeconds: {{.Values.updateStrategy.minReadySeconds}}
      {{- end}}
      {{- if and (not (eq .Values.updateStrategy.disruption.allow nil)) (or (eq .Values.updateStrategy.disruption.allow true) (eq .Values.updateStrategy.disruption.allow false)) }}
      disruption:
        allow: {{.Values.updateStrategy.disruption.allow}}
      {{- end}}
    {{- end}}
  {{- end }}


  {{- if .Values.updateStrategy.autoUpdateComponents}}
  autoUpdateComponents: {{.Values.updateStrategy.autoUpdateComponents}}
  {{- end}}


  {{- $hasAnnotations := or ($storagePodAnnotations) ($portworxApiServiceAnnotations) ($portworxServiceAnnotations ) ($kvdbServiceAnnotations) }}
  {{- $hasLabels := $portworxApiServiceLabels }}
  {{- $hasMetadata := or $hasAnnotations $hasLabels }}

  {{- if $hasMetadata}}
  metadata:
    {{- if $hasLabels}}
    labels:
      {{- if $portworxApiServiceLabels }}
      service/portworx-api:
        {{- $labels := $portworxApiServiceLabels | split ";" }}
        {{- range $key, $val := $labels }}
        {{- $label := $val | split "=" }}
          {{ $label._0 | trim }}: {{ $label._1 | trim | quote -}}
        {{- end }}
      {{- end }}
    {{- end}}
    {{- if $hasAnnotations}}
    annotations:
      {{- if $storagePodAnnotations }}
      pod/storage:
        {{- $annotations := $storagePodAnnotations | split ";" }}
        {{- range $key, $val := $annotations }}
        {{- $annotation := $val | split "=" }}
          {{ $annotation._0 | trim }}: {{ $annotation._1 | trim | quote -}}
        {{- end }}
      {{- end }}

      {{- if $portworxApiServiceAnnotations }}
      service/portworx-api:
        {{- $annotations := $portworxApiServiceAnnotations | split ";" }}
        {{- range $key, $val := $annotations }}
        {{- $annotation := $val | split "=" }}
          {{ $annotation._0 | trim }}: {{ $annotation._1 | trim | quote -}}
        {{- end }}
      {{- end }}

      {{- if $portworxServiceAnnotations }}
      service/portworx-service:
        {{- $annotations := $portworxServiceAnnotations | split ";" }}
        {{- range $key, $val := $annotations }}
        {{- $annotation := $val | split "=" }}
          {{ $annotation._0 | trim }}: {{ $annotation._1 | trim | quote -}}
        {{- end }}
      {{- end }}

      {{- if $kvdbServiceAnnotations }}
      service/portworx-kvdb-service:
        {{- $annotations := $kvdbServiceAnnotations | split ";" }}
        {{- range $key, $val := $annotations }}
        {{- $annotation := $val | split "=" }}
          {{ $annotation._0 | trim }}: {{ $annotation._1 | trim | quote -}}
        {{- end }}
      {{- end }}    

    {{- end}}
  {{- end }}

  kvdb:
  {{- if and (eq $internalKVDB true) (empty $etcdEndPoints) }}
    internal: true
  {{- else }}
    internal: false
    {{- if empty $etcdEndPoints }}
    "{{ required "A valid ETCD url in the format etcd:http://<your-etcd-endpoint> is required. Verify that the key is correct and there isnt any typo in specifying that, also ensure it is accessible from all node of your kubernetes cluster" .etcdEndPoint}}"
    {{- else }}
    endpoints:
      {{- $endpoints := $etcdEndPoints | split ";" }}
      {{- range $key, $val := $endpoints }}
      - {{$val}}
      {{- end }}
    {{- end }}
    {{- if ne $kvdbAuthSecret "none" }}
    authSecret: {{ .Values.kvdb.authSecretName }}
    {{- end }}
  {{- end }}

{{- if and (ne $drives "none") (not (hasPrefix "/" $drives)) }}
  cloudStorage:
    {{- if .Values.provider}}
    provider: {{ .Values.provider }}
    {{- end}}
    deviceSpecs:
      {{- $driveNames := $drives | split ";" }}
      {{- range $index, $name := $driveNames }}
      - {{ $name }}
      {{- end }}
    {{- if and (ne $kvdbDevice "none") (not (hasPrefix "/" $kvdbDevice)) }}
    kvdbDeviceSpec: {{ $kvdbDevice }}
    {{- end }}
    {{- if ne $systemMetadataDevice "none"}}
    systemMetadataDeviceSpec: {{ $systemMetadataDevice }}
    {{- end }}
    {{- if and (ne $journalDevice "none") (not (hasPrefix "/" $journalDevice)) }}
    journalDeviceSpec: {{ $journalDevice }}
    {{- end }}
    {{- if ne (.Values.maxStorageNodesPerZone | int) 0 }}
    maxStorageNodesPerZone: {{ .Values.maxStorageNodesPerZone }}
    {{- end }}
    {{- if ne (.Values.maxStorageNodes | int) 0 }}
    maxStorageNodes: {{ .Values.maxStorageNodes }}
    {{- end }}
{{- else }}
  {{- if $AKSInstall }}
  cloudStorage:
    {{- if .Values.provider}}
    provider: {{ .Values.provider }}
    {{- end}}
    deviceSpecs:
      - type=Premium_LRS,size=150
    {{- if and (ne $kvdbDevice "none") (not (hasPrefix "/" $kvdbDevice)) }}
    kvdbDeviceSpec: {{ $kvdbDevice }}
    {{- end }}
    {{- if ne $systemMetadataDevice "none"}}
    systemMetadataDeviceSpec: {{ $systemMetadataDevice }}
    {{- end }}
    {{- if and (ne $journalDevice "none") (not (hasPrefix "/" $journalDevice)) }}
    journalDeviceSpec: {{ $journalDevice }}
    {{- end }}
    {{- if gt (.Values.maxStorageNodesPerZone | int) 0 }}
    maxStorageNodesPerZone: {{ .Values.maxStorageNodesPerZone }}
    {{- end }}
    {{- if ne (.Values.maxStorageNodes | int) 0 }}
    maxStorageNodes: {{ .Values.maxStorageNodes }}
    {{- end }}
  {{- else }}
  storage:
    {{- if hasPrefix "/" $drives }}
    devices:
      {{- $driveNames := $drives | split ";" }}
        {{- range $index, $name := $driveNames }}
        - {{ $name }}
        {{- end }}
    {{- end }}
    {{- if ne $cacheDevices "none"}}
    cacheDevices:
      {{- $devices := $cacheDevices | split ";" }}
        {{- range $index, $device := $devices }}
        - {{ $device }}
        {{- end }}
    {{- end}}
    {{- if or $usefileSystemDrive $deployEnvironmentIKS }}
    forceUseDisks: true
    {{- end }}
    {{- if eq $usedrivesAndPartitions true }}
    useAllWithPartitions: true
    {{- end}}
    {{- if and (eq $usedrivesAndPartitions false) (eq $drives "none")}}
    useAll: true
    {{- end }}
    {{- if and (ne $kvdbDevice "none") (hasPrefix "/" $kvdbDevice) }}
    kvdbDevice: {{ $kvdbDevice }}
    {{- end }}
    {{- if ne $systemMetadataDevice "none"}}
    systemMetadataDevice: {{ $systemMetadataDevice }}
    {{- end }}
    {{- if and (ne $journalDevice "none") (or (hasPrefix "/" $journalDevice) (eq "auto" $journalDevice)) }}
    journalDevice: {{ $journalDevice }}
    {{- end }}
  {{- end }}
{{- end }}

  {{- if or (ne $dataInterface "none") (ne $managementInterface "none") }}
  network:
    {{- if ne $dataInterface "none" }}
    dataInterface: {{ $dataInterface }}
    {{- end }}
    {{- if ne $managementInterface "none" }}
    mgmtInterface: {{ $managementInterface }}
    {{- end }}
  {{- end }}

  {{- if ne $secretType "none" }}
  secretsProvider: {{$secretType}}
  {{- else }}
    {{- if $deployEnvironmentIKS }}
  secretsProvider: ibm-kp
    {{- end }}
  {{- end }}

  {{- $isLicenseSecretAdded := ne $licenseSecret "none" }}
  {{- $shouldRenderEnv := or (ne $envVars "none") .Values.envs $AKSInstall $OKEInstall $isLicenseSecretAdded }}
  {{- if $shouldRenderEnv }}
  env:
  {{- with .Values.envs }}
    {{- toYaml . | nindent 2 }}
  {{- end -}}
  {{- if not (eq $envVars "none") }}
    {{- $vars := $envVars | split ";" }}
    {{- range $key, $val := $vars }}
    {{- $envVariable := $val | split "=" }}
  - name: {{ $envVariable._0 | trim | quote }}
    value: {{ $envVariable._1 | trim | quote }}
    {{- end }}
  {{- end }}
  {{- if $isLicenseSecretAdded }}
  - name: SAAS_ACCOUNT_KEY_STRING
    valueFrom:
      secretKeyRef:
        name: "{{ $licenseSecret }}"
        key: accountKey
  {{- end }}
  {{- if $AKSInstall }}
  - name: AZURE_CLIENT_SECRET
    valueFrom:
      secretKeyRef:
        name: px-azure
        key: AZURE_CLIENT_SECRET
  - name: AZURE_CLIENT_ID
    valueFrom:
      secretKeyRef:
        name: px-azure
        key: AZURE_CLIENT_ID
  - name: AZURE_TENANT_ID
    valueFrom:
      secretKeyRef:
        name: px-azure
        key: AZURE_TENANT_ID
  {{- end }}
  {{- if $OKEInstall }}
  - name: PX_ORACLE_user_ocid
    valueFrom:
      secretKeyRef:
        name: ociapikey
        key: PX_ORACLE_user_ocid
  - name: PX_ORACLE_fingerprint
    valueFrom:
      secretKeyRef:
        name: ociapikey
        key: PX_ORACLE_fingerprint
  - name: "PX_ORACLE_private_key_path"
    value: "/etc/pwx/oci_key/oci_api_key.pem"
  {{- end }}
  {{- end }}
  
  stork:
    {{- if (and (.Values.stork.enabled) (eq .Values.stork.enabled true))}}
    enabled: true
    {{- if .Values.stork.storkVersion }}
    image: {{ template "px.getStorkImage" . }}:{{ required "A valid Image tag is required in the SemVer format" .Values.stork.storkVersion }}
    {{- end }}

    {{- with .Values.stork.env }}
    env:
      {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- with .Values.stork.volumes }}
    volumes:
      {{- toYaml . | nindent 4 }}
    {{- end -}}
    {{- if .Values.stork.args }}
    args:
    {{- $args := .Values.stork.args | split ";" }}
    {{- range $key, $val := $args }}
    {{- $arg := $val | split "=" }}
      {{ $arg._0 | trim }}: {{ $arg._1 | trim | quote -}}
    {{- end }}
    {{- end }}
    {{- else }}
    enabled: false
    {{- end }}

  {{- if or ( eq $volumesPresent "true") ( eq .Values.OKEInstall true) }}
  volumes:
  {{- if .Values.OKEInstall }}
  - name: ociapikey
    mountPath: /etc/pwx/oci_key
    secret:
      secretName: ociapikey
      items:
      - key: oci_api_key.pem
        path: oci_api_key.pem
  {{- end }}
  {{- if eq $isCoreOS true}}
  - name: src
    mountPath: /lib/modules
    hostPath:
      path: /lib/modules
      type: Directory
  {{- end }}
  {{- if ne $etcdCertPath "none" }}
  - name: etcdcerts
    mountPath: /etc/pwx/etcdcerts
    secret:
      secretName: px-etcd-certs
      items:
      - key: ca.pem
        path: ca.pem
      {{- if ne $etcdCert "none" }}
      - key: client.pem
        path: client.pem
      {{- end -}}
      {{- if ne $etcdKey "none" }}
      - key: client-key.pem
        path: client-key.key
      {{- end -}}
  {{- end}}
  {{- with .Values.volumes }}
    {{- toYaml . | nindent 2 }}
  {{- end}}
  {{- end }}

  {{- $promethusEnabled := or $prometheus.exportMetrics $prometheus.enabled}}
  {{- $monitoringEnabled := or $promethusEnabled .Values.monitoring.telemetry $prometheus.enabled .Values.grafana }}
  {{- if $monitoringEnabled }}
  monitoring:
    {{- if $promethusEnabled }}
    prometheus:
      {{- if $prometheus.enabled }}
      enabled: true
      {{- end}}
      {{- if $prometheus.exportMetrics }}
      exportMetrics: true
      {{- end}}
      {{- if $prometheus.alertManager }}
      alertManager:
        enabled: true
      {{- end}}
      {{- if and ($prometheus.enabled) (ge (int $prometheus.replicas) 1) }}
      replicas: {{ $prometheus.replicas }}
      {{- end }}
      {{- if and (ne $prometheousRetention "none") ($prometheus.enabled)}}
      retention: {{ $prometheousRetention }}
      {{- end}}
      {{- if ne $prometheousRetentionSize "none"}}
      retentionSize: {{ $prometheousRetentionSize }}
      {{- end}}
      {{- with $prometheus.resources }}
      resources:
        {{- toYaml . | nindent 8  }}
      {{- end}}
     {{- with $prometheus.storage }}
      storage:
        {{- toYaml . | nindent 8 }}
      {{- end}}
      {{- with $prometheus.volumes }}
      volumes:
          {{- toYaml . | nindent 6  }}
      {{- end }}
      {{- with $prometheus.volumeMounts }}
      volumeMounts:
          {{- toYaml . | nindent 6  }}
      {{- end}}
      {{- if $prometheus.securityContext.runAsNonRoot }}
      securityContext:
        runAsNonRoot: true
      {{- end}}
    {{- end }}

    {{- if .Values.monitoring.telemetry }}
    telemetry:
      enabled: true
    {{- end }}

    {{- if .Values.monitoring.grafana }}
    grafana:
      enabled: true
    {{- end }}
  {{- end }}

  {{- $csiEnabled := eq .Values.csi.enabled true }}
  {{- if or (eq .Values.csi.enabled true) (eq .Values.csi.enabled false) }}
  csi:
    enabled: {{ .Values.csi.enabled }}
    {{- if $csiEnabled}}
    {{- if eq .Values.csi.topology.enabled true }}
    topology:
      enabled: true
    {{- end}}
    {{- if eq .Values.csi.installSnapshotController true }}
    installSnapshotController: true
    {{- end}}
    {{- end}}
  {{- end }}


  {{- if (and (.Values.autopilot.enabled) (eq .Values.autopilot.enabled true))}}
  autopilot:
    enabled: true
    {{- if ne .Values.autopilot.image ""}}
    image: {{.Values.autopilot.image}}
    {{- end }}
    {{- if eq .Values.autopilot.lockImage true}}
    lockImage: true
    {{- end }}
    {{- if .Values.autopilot.args }}
    args:
    {{- $args := .Values.autopilot.args | split ";" }}
    {{- range $key, $val := $args }}
    {{- $arg := $val | split "=" }}
      {{ $arg._0 | trim }}: {{ $arg._1 | trim | quote -}}
    {{- end }}
    {{- end }}
    {{- with .Values.autopilot.env }}
    env:
      {{- toYaml . | nindent 4 }}
    {{- end }}

    {{- with .Values.autopilot.volumes }}
    volumes:
      {{- toYaml . | nindent 4}}
    {{- end }}
    {{- with .Values.autopilot.providers }}
    providers:
    {{- range . }}
    - name: "{{ .name }}"
      type: "{{ .type }}"
      params:
        {{- $params := splitList ";" .params }}
        {{- range $params }}
        {{- $pair := splitList "=" . }}
        {{- if eq (len $pair) 2 }}
        {{- $key := index $pair 0 }}
        {{- $value := index $pair 1 }}
        {{ $key }}: "{{ $value }}"
        {{- end }}
        {{- end }}
    {{- end }}
  {{- end }}
  {{- end }}

  {{- if .Values.runtimeOptions }}
  runtimeOptions:
  {{- $args := .Values.runtimeOptions | split ";" }}
  {{- range $key, $val := $args }}
  {{- $arg := $val | split "=" }}
    {{ $arg._0 | trim }}: {{ $arg._1 | trim | quote -}}
  {{- end }}
  {{- end }}

  {{- if .Values.featureGates }}
  featureGates:
  {{- $args := .Values.featureGates | split ";" }}
  {{- range $key, $val := $args }}
  {{- $arg := $val | split "=" }}
    {{ $arg._0 | trim }}: {{ $arg._1 | trim | quote -}}
  {{- end }}
  {{- end }}

  {{- if eq .Values.security.enabled true}}
  security: 
    enabled: true
    auth:
      {{- if (or (eq .Values.security.auth.guestAccess "Enabled") (eq .Values.security.auth.guestAccess "Disabled") (eq .Values.security.auth.guestAccess "Managed"))}}
      guestAccess: {{.Values.security.auth.guestAccess}}
      {{- end}}
      {{- if and .Values.security.auth.selfSigned.tokenLifetime .Values.security.auth.selfSigned.issuer .Values.security.auth.selfSigned.sharedSecret }}
      selfSigned:
        tokenLifetime: {{.Values.security.auth.selfSigned.tokenLifetime}}
        issuer: {{.Values.security.auth.selfSigned.issuer}}
        sharedSecret: {{.Values.security.auth.selfSigned.sharedSecret}}
      {{- end}}
  {{- end}}

  {{- with .Values.resources }}
  resources:
    {{- toYaml . | nindent 4  }}
  {{- end}}

  {{- if or .Values.tolerations .Values.nodeAffinity}}
  placement:
  {{- with .Values.tolerations }}
    tolerations:
      {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.nodeAffinity }}
    nodeAffinity:
      {{- toYaml . | nindent 5 }}
  {{- end}}
  {{- end}}

  {{- with .Values.nodesConfiguration }}
  nodes:
    {{- toYaml . | nindent 2 }}
  {{- end}}

  {{- if .Values.deleteStrategy.type }}
  deleteStrategy:
    type: {{ .Values.deleteStrategy.type }}
  {{- end }}
{{- end }}
