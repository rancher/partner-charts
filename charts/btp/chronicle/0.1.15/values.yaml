---
## @md # Chronicle
## @md
## @md | field | description | default |
## @md |-|-|-|

global:
  image:
    tag:

## @md | `affinity`| custom affinity rules for the chronicle pod | {} |
affinity: {}

auth:
  ## @md | `auth.required` | if true require authentication | false |
  required: false
  id:
    claims: email
  jwks:
    enabled: true
    url:
  userinfo:
    url:

## @md | `backtraceLevel` | backtrace level for Chronicle  | nil |
backtraceLevel: full

devIdProvider:
  enabled: true
  ## @md | `devIdProvider.image` | the image to use for the id-provider container | blockchaintp/id-provider |
  image:
    ## @md | `devIdProvider.image.pullPolicy` | the image pull policy | IfNotPresent |
    pullPolicy: IfNotPresent
    ## @md | `devIdProvider.image.repository` | the image repository | blockchaintp/id-provider |
    repository: blockchaintp/id-provider-amd64
    ## @md | `devIdProvider.image.tag` | the image tag | latest |
    tag: BTP2.1.0-0.7.3

## @md | `extraVolumes` | a list of additional volumes to add to chronicle | [] |
extraVolumes: []
## @md | `extraVolumeMounts` | a list of additional volume mounts to add to chronicle | [] |
extraVolumeMounts: []

image:
  ## @md | `image.repository` | the repository of the image | blockchaintp/chronicle |
  repository: blockchaintp/chronicle-amd64
  ## @md | `image.tag`| the tag of the image to use | latest |
  tag: BTP2.1.0-0.7.3
  ## @md | `image.pullPolicy` | the image pull policy to use | IfNotPresent |
  pullPolicy: IfNotPresent

imagePullSecrets:
  ## @md | `imagePullSecrets.enabled`| if true use the list of named imagePullSecrets | false |
  enabled: false
  ## @md | `imagePullSecrets.value`| a list if named secret references of the form `- name: secretName`| [] |
  value: []

ingress:
  ## @md | `ingress.apiVersion` | if necessary the apiVersion of the ingress may be overridden | "" |
  apiVersion: ""
  ## @md | `ingress.enabled` | true to enable the ingress to the main service rest-api | false |
  enabled: false
  ## @md | `ingress.certManager` | true to enable the acme certmanager for this ingress | false |
  certManager: false
  ## @md | `ingress.hostname` | primary hostname for the ingress | false |
  hostname:
  ## @md | `ingress.path` | path for the ingress's primary hostname | / |
  path: /
  ## @md | `ingress.pathType` | pathType for the ingress's primary hostname | nil |
  pathType:
  ## @md | `ingress.annotations` | annotations for the ingress | {} |
  annotations: {}
  ## @md | `ingress.tls` | true to enable tls on the ingress with a secrete at hostname-tls | false |
  tls: false
  ## @md | `ingress.extraHosts` | list of extra hosts to add to the ingress | [] |
  extraHosts: []
  ## @md | `ingress.extraPaths` | list of extra paths to add to the primary host of the ingress | [] |
  extraPaths: []
  ## @md | `ingress.extraTls` | list of extra tls entries | [] |
  extraTls: []
  ## @md | `ingress.hosts`| list of ingress host and path declarations for the chronicle ingress| [] |
  hosts: []
  # - host: chart-example.local
  #   paths:
  #     - /

## @md | `logLevel` | log level for Chronicle | info |
logLevel: info

opa:
  ## @md | `opa.enabled` | if true set up a full OPA enabled setup | true |
  enabled: true
  opaInit:
    ## @md | `opa.init.image` | the image to use for the chronicle-init container | blockchaintp/chronicle-opa-init |
    image:
      ## @md | `image.pullPolicy` | the image pull policy to use | IfNotPresent |
      pullPolicy: IfNotPresent
      ## @md | `image.repository` | the repository of the image | blockchaintp/chronicle |
      repository: blockchaintp/opactl-amd64
      ## @md | `image.tag`| the tag of the image to use | latest |
      tag: BTP2.1.0-0.7.3
  policy:
    entrypoint: allow_transactions.allowed_users
    id: allow_transactions
    url: file:///app/policies/bundle.tar.gz
  tp:
    image:
      ## @md | `image.repository` | the repository of the image | blockchaintp/chronicle |
      repository: blockchaintp/opa-tp-amd64
      ## @md | `image.tag`| the tag of the image to use | latest |
      tag: BTP2.1.0-0.7.3
      ## @md | `image.pullPolicy` | the image pull policy to use | IfNotPresent |
      pullPolicy: IfNotPresent
    ## @md | `opa.tp.resources` | resources | map | nil |
    resources:
    ## @md | `opa.tp.extraVolumes` | extra volumes declarations for the opa-tp deployment | list | nil
    extraVolumes:
    ## @md | `opa.tp.extraVolumeMounts` | extra volume mounts for opa-tp deployment | list | nil
    extraVolumeMounts:

## @md | `port` | the port on which the chronicle service listens | 9982 |
port: 9982

## @md | `replicas` | number of Chronicle replicas to run | 1 |
replicas: 1

serviceAccount:
  ## @md | `serviceAccount.create` | true to create a service account | false |
  create: true
  ## @md | `serviceAccount.name` | name of the service account | nil (defaults to based on release name) |
  name:

test:
  ## @md | `test.enabled` | true to enable test Jobs and Services | true |
  enabled: true
  api:
    ## @md | `api-test-container.image` | the image to use for the api-test container | blockchaintp/chronicle-api-test |
    image:
      ## @md | `test.api.image.pullPolicy` | the image pull policy | IfNotPresent |
      pullPolicy: IfNotPresent
      ## @md | `test.api.image.repository` | the image repository | blockchaintp/chronicle-helm-api-test |
      repository: blockchaintp/chronicle-helm-api-test-amd64
      ## @md | `test.api.image.tag` | the image tag | latest |
      tag: BTP2.1.0-0.7.3

postgres:
  # if enabled we allocate a postgres database here
  ## @md | `postgres.enabled` | if true create an internal postgres instance | boolean | true |
  enabled: true
  ## @md | `postgres.env` | postgres environment variables | map | N/A |
  env:
  image:
    registry:
    ## @md | `postgres.image.repository` | postgres image repository | string | "postgres" |
    repository: postgres
    ## @md | `postgres.image.tag` | postgres image tag | string | "11" |
    tag: "11"
  ## @md | `postgres.user` | user for the postgres database | string | "postgres" |
  user: postgres
  ## @md | `postgres.host` | host for the postgres database | string | "localhost" |
  host: localhost
  ## @md | `postgres.database` | database for the postgres database | string | "postgres" |
  database: postgres
  ## @md | `postgres.port` | port for the postgres database | int | 5432 |
  port: 5432
  ## @md | `postgres.password` | password for the postgres database | string | "postgres" |
  password: postgres
  ## @md | `postgres.existingPasswordSecret` | name of a secret containing the postgres password | string | nil |
  existingPasswordSecret:
  ## @md | `postgres.existingPasswordSecret` | name of the key in a secret containing the postgres password | string | nil |
  existingPasswordSecretKey:
  ## @md | `postgres.tls` | postgres TLS configuration | string | nil |
  tls:
  ## @md | `postgres.persistence` | postgres persistence settings | map | N/A |
  persistence:
    ## @md | `postgres.persistence.enabled` | if true allocate a PVC for the postgres instance | boolean | false |
    enabled: false
    ## @md | `postgres.persistence.annotations` | any custom annotations to the postgres PVC's | map | {} |
    annotations: {}
    ## @md | `postgres.persistence.accessModes` | postgres PVC access modes | list | [ "ReadWriteOnce" ] |
    accessModes:
      - "ReadWriteOnce"
    ## if set to "-" (empty string) then storageClassName: "", which disables dynamic provisioning
    ## if undefined or set to null, no storageClassName is set and the clusters default StorageClass will be used
    ## if a storageClass name is set then storageClassName: "setValue"
    ## @md | `postgres.persistence.storageClass` | postgres PVC storageClass | string | nil |
    storageClass:
    ## @md | `postgres.persistence.size` | postgres PVC volume size | string | "40Gi" |
    size: "40Gi"
  ## @md | `postgres.resources` | resources | map | nil |
  resources:

## @md | `resources` | resources | map | nil |
resources:

sawset:
  image:
    ## @md | `sawset.image.pullPolicy` | the image pull policy | IfNotPresent |
    pullPolicy: IfNotPresent
    ## @md | `sawset.image.repository` | the image repository | blockchaintp/sawtooth-validator |
    repository: blockchaintp/sawtooth-validator
    ## @md | `sawset.image.tag` | the image tag | latest |
    tag: BTP2.1.0

tp:
  ## @md | `tp.args` | a string of arguments to pass to the tp container| nil |
  args:
  image:
    ## @md | `tp.image.pullPolicy` | the image pull policy | IfNotPresent |
    pullPolicy: IfNotPresent
    ## @md | `tp.image.repository` | the image repository | blockchaintp/chronicle-tp |
    repository: blockchaintp/chronicle-tp-amd64
    ## @md | `tp.image.tag` | the image tag | latest |
    tag: BTP2.1.0-0.7.3
  ## @md | `tp.extraVolumes` | extra volumes declarations for the chronicle-tp deployment | list | nil
  extraVolumes:
  ## @md | `tp.extraVolumeMounts` | extra volume mounts for chronicle-tp deployment | list | nil
  extraVolumeMounts:
  ## @md | `tp.resources` | resources | map | nil |
  resources:
  ## @md | `tp.maxUnavailable` | maximum unavailable nodes during a rolling upgrade |
  maxUnavailable: 1
  ## @md | `tp.minReadySeconds` | minimum time before node becomes available |
  minReadySeconds: 0
  logLevel: info

volumes: {}

## @md | `sawtooth` | sawtooth options may be configured | see [Sawtooth](../sawtooth/README.md) |
sawtooth:
  sawtooth:
    consensus: 400
    statefulset:
      enabled: true
