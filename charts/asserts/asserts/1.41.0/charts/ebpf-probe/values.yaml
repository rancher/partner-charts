enableDnsResolving: true
prometheusPort: 7117
prometheusEndpoint: "/metrics"
pollIntervalSeconds: 5

rbac:
  create: true
  # OpenShift specific
  sccEnabled: false

image:
  repository: asserts/ebpf-probe
  pullPolicy: IfNotPresent
  tag: ""

serviceAccount:
  create: true
  name: ""
  imagePullSecrets: []
  annotations: {}
  extraLabels: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

resources:
  limits:
    cpu: 150m
    memory: 300Mi
  requests:
    cpu: 50m
    memory: 100Mi

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  privileged: true
  readOnlyRootFilesystem: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule

nodeSelector: {}
affinity: {}
priorityClassName:

podMonitor:
  enabled: true
  # Use if you need to add a label that matches
  # your prometheus-operator podMonitorSelector.
  #
  # Ex:
  #
  # running:
  # kubectl get prometheus -A -ojsonpath='{.items[].spec.podMonitorSelector}'
  #
  # returns:
  # {"matchLabels":{"release":"kube-prometheus-stack"}}
  #
  # set:
  # extraLabels:
  #   release: kube-prometheus-stack
  extraLabels: {}

# namespaces to only include for tracking
# helps reduce cardinality for clusters with many namespaces
# default includes all namespaces
includeOnly:

# include calls to external services
includeExternal: false
