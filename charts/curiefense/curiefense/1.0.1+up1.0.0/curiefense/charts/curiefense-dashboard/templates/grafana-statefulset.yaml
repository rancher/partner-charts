{{- if .Values.global.enable.grafana }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: grafana
  name: grafana
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  serviceName: grafana-hl
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
    spec:
      containers:
      - name: grafana
        {{ if regexMatch ".*/.*:" .Values.global.images.grafana }}
        {{/* The image name contains a version tag (e.g. for tests), do not append docker_tag */}}
        image: {{ .Values.global.images.grafana }}
        {{ else }}
        image: {{ .Values.global.images.grafana }}:{{ .Values.global.settings.docker_tag }}
        {{ end }}
        securityContext:
          runAsUser: 0
        ports:
        - containerPort: 3000
          name: grafana-http
        livenessProbe:
          httpGet:
            path: /api/health
            port: grafana-http
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: persistent-grafana
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        resources:
          limits:
            memory: "1Gi"
            cpu: "900m"
          requests:
            memory: "100Mi"
            cpu: {{ .Values.global.requests.cpu.grafana }}
      restartPolicy: Always
      serviceAccountName: ""
{{- if .Values.global.tolerations }}
      tolerations:
{{ toYaml .Values.global.tolerations | indent 8 }}
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: persistent-grafana
    spec:
      storageClassName: {{ .Values.global.storage.storage_class_name }}
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.global.storage.grafana_storage_size }}
{{ end }}
