# -- Allows overriding the name to use instead of "microgateway".
nameOverride: ""
# -- Allows overriding the name to use as full name of resources.
fullnameOverride: ""
# -- Labels to add to all resources.
commonLabels: {}
# -- Annotations to add to all resources.
commonAnnotations: {}
# -- ImagePullSecrets to use when pulling images.
imagePullSecrets: []
#   - name: myRegistryKeySecretName

crds:
  # -- Whether to skip the sanity check which prevents installing/upgrading the helm chart in a cluster with outdated Airlock Microgateway CRDs.
  # The check aims to prevent unexpected behavior and issues due to Helm v3 not automatically upgrading CRDs which are already present in the cluster
  # when performing a "helm install/upgrade".
  skipVersionCheck: false
operator:
  # -- Number of replicas for the operator Deployment.
  replicaCount: 2
  # -- Specifies the operator update strategy.
  updateStrategy:
    type: RollingUpdate
  # Specifies the Airlock Microgateway Operator image.
  image:
    # -- Image repository from which to pull the Airlock Microgateway Operator image.
    repository: "quay.io/airlock/microgateway-operator"
    # -- Image tag to pull.
    tag: "4.5.0"
    # -- SHA256 image digest to pull (in the format "sha256:c79ee3f85862fb386e9dd62b901b607161d27807f512d7fbdece05e9ee3d7c63").
    # Overrides tag when specified.
    digest: "sha256:601f979285561502c7875c4ae9312f05beef6f38b45ba34f9b60cb59c990142d"
    # -- Pull policy for this image.
    pullPolicy: IfNotPresent
  # -- Annotations to add to all Pods.
  podAnnotations: {}
  # -- Labels to add to all Pods.
  podLabels: {}
  # -- Annotations to add to the Service.
  serviceAnnotations: {}
  # prometheus.io/scrape: "true"
  # prometheus.io/port: "8080"

  # -- Labels to add to the Service.
  serviceLabels: {}
  # -- Resource restrictions to apply to the operator container.
  resources: {}
  # We recommend at least the following resource specification.
  #  limits:
  #    cpu: 1000m
  #    memory: 512Mi
  #  requests:
  #    cpu: 100m
  #    memory: 512Mi

  # -- Custom nodeSelector to apply to the operator Deployment in order to constrain its Pods to certain nodes.
  nodeSelector: {}
  # -- Custom tolerations to apply to the operator Deployment in order to allow its Pods to run on tainted nodes.
  tolerations: []
  # -- Custom affinity to apply to the operator Deployment. Used to influence the scheduling.
  affinity: {}
  # Parameters for the operator configuration.
  config:
    # -- Operator application log level.
    logLevel: "info"
  webhook:
    # -- Configure which provider is responsible for webhook certificates
    certificateProvider: cert-manager
  # Configures the generation of the ServiceAccount.
  serviceAccount:
    # -- Whether a ServiceAccount should be created.
    create: true
    # -- Annotations to add to the ServiceAccount.
    annotations: {}
    # -- Name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template.
    name: ""
  # -- Allows to restrict the operator to specific namespaces, depending on your needs.
  # For a `OwnNamespace` or `SingleNamespace` installation the list may only contain one namespace (e.g., `watchNamespaces: ["airlock-microgateway-system"]`).
  # In case of the `OwnNamespace` installation mode the specified namespace should be equal to the installation namespace.
  # For a static `MultiNamespace` installation, the complete list of namespaces must be provided in the `watchNamespaces`.
  # An `AllNamespaces` installation or the usage of the `watchNamespaceSelector` requires the `watchNamespaces` to be empty.
  # Regardless of the installation modes supported by `watchNamespaces`, RBAC is created only namespace-scoped (using Roles and RoleBindings) in the respective namespaces.
  # Please note that this feature requires a Premium license.
  watchNamespaces: []
  # -- Allows to dynamically select watch namespaces of the operator and the scope of the webhooks based on a Namespace label selector.
  # It is able to detect and reconcile resources in all namespaces that match the label selector automatically, even for new namespaces, without restarting the operator.
  # This facilitates a dynamic `MultiNamespace` installation mode, but still requires cluster-scoped permissions (i.e., ClusterRoles and ClusterRoleBindings).
  # An `AllNamespaces` installation or the usage of the `watchNamespaces` requires the `watchNamespaceSelector` to be empty.
  # Please note that this feature requires a Premium license.
  watchNamespaceSelector: {}
  # For further examples, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#resources-that-support-set-based-requirements.
  #  matchLabels:
  #    microgateway.airlock.com/enable: "true"
  #  matchExpressions:
  #    - { key: environment, operator: NotIn, values: [dev] }

  # Configures the generation of Role and RoleBinding as well as ClusterRoles and ClusterRoleBinding pairs for the ServiceAccount specified above.
  rbac:
    # -- Whether to create RBAC resources which are required for the Airlock Microgateway Operator to function.
    create: true
  # Configures the generation of a Prometheus Operator ServiceMonitor.
  serviceMonitor:
    # -- Whether to create a ServiceMonitor resource for monitoring.
    create: false
    # -- Labels to add to the ServiceMonitor.
    labels: {}
    # release: "<prometheus-operator-release>"
  # Configures the Kubernetes Gateway API integration.
  gatewayAPI:
    # -- Whether to enable the Kubernetes Gateway API related controllers.
    # Requires that the gateway.networking.k8s.io/v1 resources are installed on the cluster.
    enabled: false
    # -- Controller name referred in the GatewayClasses managed by this operator. The value must be a path prefixed by the domain `microgateway.airlock.com`.
    controllerName: microgateway.airlock.com/gatewayclass-controller
    # Configures PodMonitor resources for Gateway Pods.
    podMonitor:
      # -- Whether the controller should create a PodMonitor per Gateway.
      # Requires that the monitoring.coreos.com/v1 resources are installed on the cluster.
      create: false
      # -- Allows to define additional labels that should be set on the PodMonitors.
      labels: {}
      # release: "<prometheus-operator-release>"
engine:
  # Specifies the Airlock Microgateway Engine image.
  image:
    # -- Image repository from which to pull the Airlock Microgateway Engine image.
    repository: "quay.io/airlock/microgateway-engine"
    # -- Image tag to pull.
    tag: "4.5.0"
    # -- SHA256 image digest to pull (in the format "sha256:a3051f42d3013813b05f7513bb86ed6a3209cb3003f1bb2f7b72df249aa544d3").
    # Overrides tag when specified.
    digest: "sha256:4284750010f2432c74dc613c758898d2ac25544af23e88330f1d5b17943ac7c6"
    # -- Pull policy for this image.
    pullPolicy: IfNotPresent
  # -- Resource restrictions to apply to the Airlock Microgateway Engine container.
  resources: {}
  # We recommend at least the following resource specification.
  #  limits:
  #    cpu: 500m
  #    memory: 128Mi
  #  requests:
  #    cpu: 10m
  #    memory: 40Mi

  # Additional configuration when deployed as a sidecar.
  sidecar:
    # Configures the generation of a Prometheus Operator PodMonitor.
    podMonitor:
      # -- Whether the controller should create a PodMonitor per SidecarGateway. Requires that the monitoring.coreos.com/v1 resources are installed on the cluster.
      create: false
      # -- Labels to add to the PodMonitor.
      labels: {}
      # release: "<prometheus-operator-release>"
networkValidator:
  # -- Deprecated
  image: null
  # -- Resource restrictions to apply to the Airlock Microgateway Network Validator init-container.
  resources:
    limits:
      cpu: 25m
      memory: 12Mi
    requests:
      cpu: 5m
      memory: 1Mi
sessionAgent:
  # Specifies the Airlock Microgateway Session Agent image.
  image:
    # -- Image repository from which to pull the Airlock Microgateway Session Agent image.
    repository: "quay.io/airlock/microgateway-session-agent"
    # -- Image tag to pull.
    tag: "4.5.0"
    # -- SHA256 image digest to pull (in the format "sha256:a3051f42d3013813b05f7513bb86ed6a3209cb3003f1bb2f7b72df249aa544d3").
    # Overrides tag when specified.
    digest: "sha256:9794ff70f5e6ff97f4e5cf1af45e93b88667c6122b518295dfbf22f2c447e59f"
    # -- Pull policy for this image.
    pullPolicy: IfNotPresent
  # -- Resource restrictions to apply to the Airlock Microgateway Session Agent container.
  resources: {}
  # We recommend at least the following resource specification.
  #  limits:
  #    cpu: 150m
  #    memory: 32Mi
  #  requests:
  #    cpu: 10m
  #    memory: 8Mi
license:
  # -- Name of the secret containing the "microgateway-license.txt" key.
  secretName: "airlock-microgateway-license"
# Creates dashboards in the form of ConfigMaps that can be imported
# by Grafana using its sidecar setup.
dashboards:
  # -- Whether to create any ConfigMaps containing Grafana dashboards to import.
  create: false
  config:
    # Configures the necessary label and annotations along with their values
    # to enable Grafana to correctly identify the ConfigMaps containing
    # dashboards and file them within a dedicated folder in the dashboard overview.
    # These settings need to match the Grafana sidecar configuration.
    grafana:
      folderAnnotation:
        # -- Name of the annotation containing the folder name to file dashboards into.
        name: "grafana_folder"
        # -- Name of the folder dashboards are filed into within the Grafana UI.
        value: "Airlock Microgateway"
      dashboardLabel:
        # -- Name of the label that lets Grafana identify ConfigMaps that represent dashboards.
        name: "grafana_dashboard"
        # -- Value of the label that lets Grafana identify ConfigMaps that represent dashboards.
        value: "1"
  instances:
    # Available dashboard instances that can be individually created/deployed.
    overview:
      # -- Whether to create the overview dashboard.
      create: true
    license:
      # -- Whether to create the license dashboard.
      create: true
    blockMetrics:
      # -- Whether to create the block metrics dashboard.
      create: true
    blockLogs:
      # -- Whether to create the block logs dashboard.
      create: true
    headerLogs:
      # -- Whether to create the header rewrite logs dashboard.
      create: true
    logOnlyMetrics:
      # -- Whether to create the log only metrics dashboard
      create: true
    logOnlyLogs:
      # -- Whether to create the log only logs dashboard.
      create: true
    requestLogs:
      # -- Whether to create the request logs dashboard.
      create: true
    accessCtrlLogs:
      # -- Whether to create the access control logs dashboard.
      create: true
# Check whether the installation of the Airlock Microgateway Helm Chart was successful.
# Requires a secret with a valid Airlock Microgateway license key already to be present.
tests:
  # -- Whether additional resources required for running `helm test` should be created (e.g. Roles and ServiceAccounts).
  # If set to false, `helm test` will not run any tests.
  enabled: false
