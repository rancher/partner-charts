{{- if eq .Values.volumeClass true }}
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
    name: {{ .Values.volumeClassName }}
{{- if eq .Values.defaultStorageClass "volume" }}
    annotations:
        storageclass.kubernetes.io/is-default-class: "true"
{{- end }}
provisioner: {{ include "nutanix-csi-storage.drivername" . }}
parameters:
    storageType: NutanixVolumes
    csi.storage.k8s.io/provisioner-secret-name: {{ .Values.secretName }}
    csi.storage.k8s.io/provisioner-secret-namespace: {{ .Release.Namespace }}
    csi.storage.k8s.io/node-publish-secret-name: {{ .Values.secretName }}
    csi.storage.k8s.io/node-publish-secret-namespace: {{ .Release.Namespace }}
    csi.storage.k8s.io/controller-expand-secret-name: {{ .Values.secretName }}
    csi.storage.k8s.io/controller-expand-secret-namespace: {{ .Release.Namespace }}
    storageContainer: {{ .Values.storageContainer }}
    csi.storage.k8s.io/fstype: {{ .Values.fsType }}
    isSegmentedIscsiNetwork: {{ quote .Values.networkSegmentation }}
{{- if eq .Values.lvmVolume true }}
    isLVMVolume: "true"
    numLVMDisks: {{ quote .Values.lvmDisks }}
{{- end }}
allowVolumeExpansion: true
reclaimPolicy: Delete
---
{{- if .Capabilities.APIVersions.Has "snapshot.storage.k8s.io/v1" }}
apiVersion: snapshot.storage.k8s.io/v1
{{- else }}
apiVersion: snapshot.storage.k8s.io/v1beta1
{{- end }}
kind: VolumeSnapshotClass
metadata:
  name: nutanix-snapshot-class
driver: {{ include "nutanix-csi-storage.drivername" . }}
parameters:
    storageType: NutanixVolumes
    csi.storage.k8s.io/snapshotter-secret-name: {{ .Values.secretName }}
    csi.storage.k8s.io/snapshotter-secret-namespace: {{ .Release.Namespace }}
deletionPolicy: Delete
{{- end }}
---
{{- if eq .Values.fileClass true }}
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
    name: {{ .Values.fileClassName }}
{{- if eq .Values.defaultStorageClass "file" }}
    annotations:
        storageclass.kubernetes.io/is-default-class: "true"
{{- end }}
provisioner: {{ include "nutanix-csi-storage.drivername" . }}
parameters:
    storageType: NutanixFiles
    nfsServer: {{ .Values.fileHost }}
    nfsPath: {{ .Values.filePath }}
{{- end }}
---
{{- if eq .Values.dynamicFileClass true }}
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
    name: {{ .Values.dynamicFileClassName }}
{{- if eq .Values.defaultStorageClass "dynfile" }}
    annotations:
        storageclass.kubernetes.io/is-default-class: "true"
{{- end }}
provisioner: {{ include "nutanix-csi-storage.drivername" . }}
parameters:
    storageType: NutanixFiles
    dynamicProv: ENABLED
    nfsServerName: {{ .Values.fileServerName }}
    csi.storage.k8s.io/provisioner-secret-name: {{ .Values.secretName }}
    csi.storage.k8s.io/provisioner-secret-namespace: {{ .Release.Namespace }}
    csi.storage.k8s.io/node-publish-secret-name: {{ .Values.secretName }}
    csi.storage.k8s.io/node-publish-secret-namespace: {{ .Release.Namespace }}
    csi.storage.k8s.io/controller-expand-secret-name: {{ .Values.secretName }}
    csi.storage.k8s.io/controller-expand-secret-namespace: {{ .Release.Namespace }}
allowVolumeExpansion: true
{{- end }}