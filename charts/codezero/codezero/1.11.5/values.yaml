# Default values for Codezero.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  tag: ""
  repository: ""
hub:
  url: https://hub.codezero.io
space:
  token: "" # deprecated. use org.id and org.apikey instead
  name: ""
org:
  apikey: ""
  id: ""
  secret: ""
opa:
  url: ""
  enabled: false
tracing:
  enabled: false

podAnnotations: { }
labels: { }
podLabels: { }

router:
  image:
    repository: ""
    name: router
    tag: ""
  privilegedAccess: false
  replicas: 1
  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
  topologySpreadConstraints: []
  labels: {}
  podLabels: { }
  podAnnotations: { }
  serviceLabels: { }

operator:
  name: operator
  image:
    repository: ""
    name: operator
    tag: ""
    pullPolicy: Always
  replicas: 1

  podAnnotations: { }
  labels: { }
  podLabels: { }

  podSecurityContext: { }
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault

  nodeSelector: { }
  tolerations: [ ]
  affinity: { }

spaceagent:
  name: spaceagent
  logLevel: info
  image:
    repository: ""
    name: spaceagent
    tag: ""
    pullPolicy: Always

  # for cases where codezero's loadbalancer host is not public and custom networking/ingress is used to make the spaceagent publicly accessible
  externalHost: ""

  replicas: 1

  # for horizontal scaling (experimental). Secret must be in the same namespace as the spaceagent
  redis:
    secret: ""

  podAnnotations: {}
  labels: {}
  podLabels: {}

  podSecurityContext: {}
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault

  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
  topologySpreadConstraints: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  service:
    annotations: {}
    type: LoadBalancer
    loadBalancerIP: ""

  serviceAccount:
    create: true
    annotations: {}
    name: ""
