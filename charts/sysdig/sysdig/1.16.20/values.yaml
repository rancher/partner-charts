# Default values for Sysdig Monitor and Secure Helm package.
image:
  # This is a hack to support RELATED_IMAGE_<identifier> feature in Helm based
  # Operators
  #
  # As long as I don't want to people to use this, I will keep it undocumented
  overrideValue: null
  registry: quay.io
  repository: sysdig/agent
  tag: 12.17.1
  # Specify a imagePullPolicy
  # Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  # ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  pullPolicy: IfNotPresent
  # Optionally specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  #
  # pullSecrets:
  #   - name: myRegistrKeySecretName
# Specify a predefined resource profile.
#
# Available options are:
# * small
#   Defined as:
#   requests:
#     cpu: 1000m
#     memory: 1024Mi
#   limits:
#     cpu: 1000m
#     memory: 1024Mi
#
# * medium
#   Defined as:
#   requests:
#     cpu: 3000m
#     memory: 3072Mi
#   limits:
#     cpu: 3000m
#     memory: 3072Mi
#
# * large
#   Defined as:
#   requests:
#     cpu: 5000m
#     memory: 6144Mi
#   limits:
#     cpu: 5000m
#     memory: 6144Mi
#
# * custom
#   If you want to define your own resource profile, just comment the resourceProfile line,
#   uncomment the section below, and fill in the appropriate values.
#   You may want to check https://docs.sysdig.com/en/tuning-sysdig-agent.html
#   If you have more questions or concerns, please refer to Sysdig Support.
resourceProfile: small
# resourceProfile: custom
# resources:
#   requests:
#     cpu: <cpu requests>m
#     memory: <memory requests>Mi
#   limits:
#     cpu: <cpu limits>m
#     memory: <memory limits>Mi
gke:
  # true here enables the deployment on gke autopilot clusters
  autopilot: false
rbac:
  # true here enables creation of rbac resources
  create: true
scc:
  # true here enables creation of Security Context Constraints in Openshift
  create: true
psp:
  # true here enables creation of Pod Security Policy to allow the agent run with the required permissions
  create: true
serviceAccount:
  # Create and use serviceAccount resources
  create: true
  # Use this value as serviceAccountName
  name: null
daemonset:
  deploy: true
  # Perform rolling updates by default in the DaemonSet agent
  # ref: https://kubernetes.io/docs/tasks/manage-daemon/update-daemon-set/
  updateStrategy:
    # You can also customize maxUnavailable, maxSurge or minReadySeconds if you
    # need it
    type: RollingUpdate
    rollingUpdate: {}
  ## Extra environment variables that will be pass onto deployment pods
  env: {}
  nodeSelector: {}
  # arch and os will be used to template out a node affinity block matching everything in each list. If affinity is
  # defined, these fields will be ignored
  arch:
    - amd64
    - arm64
    - s390x
  os:
    - linux
  # Allow the DaemonSet to schedule using affinity rules
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}
  # Allow the DaemonSet to set annotations
  annotations: {}
  # Allow the DaemonSet to set labels
  labels: {}
  # Liveness and readiness probes initial delay (in seconds)
  probes:
    initialDelay: 90
  kmodule:
    env: {}
# If is behind a proxy you can set the proxy server
# This proxy settings apply for the App-Checks.
# If you need to configure the agent to allow it to communicate with the Sysdig collector through an HTTP proxy check:
# https://docs.sysdig.com/en/enable-http-proxy-for-agents.html
proxy:
  httpProxy: null
  httpsProxy: null
  noProxy: null
# Set daemonset timezone
timezone: null
# Set daemonset priorityClassName
priorityClassName: null
ebpf:
  # Enable eBPF support for Sysdig Agent
  enabled: false
  settings:
    # Needed to correctly detect the kernel version for the eBPF program
    # Set to false if not running on Google COS
    mountEtcVolume: true
slim:
  # Uses a slim version of the Sysdig Agent
  enabled: true
  # The image repo to be used for slim Agents
  image:
    repository: sysdig/agent-slim
  # When using slim the kernel module is built in other container, which
  # contains the toolchain required to build the kernel module.
  kmoduleImage:
    repository: sysdig/agent-kmodule
    digest: null
  resources:
    # Resources required by the kernel module builder image. These are some
    # a sane defaults ones, but you can tweak or ask Sysdig Support for more
    # info about this
    requests:
      cpu: 1000m
      memory: 348Mi
    limits:
      cpu: 1000m
      memory: 512Mi
# For Sysdig On-Prem installations or for custom collector settings, set the following fields
collectorSettings:
  collectorHost: null
  collectorPort: null
  ssl: null
  sslVerifyCertificate: null
# Setting a cluster name allows you to filter events from this cluster using kubernetes.cluster.name
clusterName: ""
sysdig:
  # Required: You need your Sysdig Agent access key before running agents, either specifying 'accessKey' here, or using 'existingAccessKeySecret'
  accessKey: ""
  # Alternatively, specify the name of a Kubernetes secret containing an 'access-key' entry
  existingAccessKeySecret: ""
  # Disable capture functionality (see https://docs.sysdig.com/en/disable-captures.html)
  disableCaptures: false
  # Advanced settings. Any option in here will be directly translated into dragent.yaml in the Configmap
  settings: {}
  ### Example: Agent tags
  # tags: linux:ubuntu,dept:dev,local:nyc
  ### Example: Proxy configuration (see https://docs.sysdig.com/en/enable-http-proxy-for-agents.html)
  # ssl: false
  # http_proxy:
  #   proxy_host: squid.yourdomain.com
  #   proxy_port: 3128
  #   ssl: false
secure:
  # true here enables Sysdig Secure: container run-time security & forensics
  enabled: true
  vulnerabilityManagement:
    newEngineOnly: false
auditLog:
  # true here activates the K8s Audit Log feature for Sysdig Secure
  enabled: false
  auditServerUrl: 0.0.0.0
  auditServerPort: 7765
  dynamicBackend:
    # true here configures an AuditSink who will receive the K8s audit logs
    enabled: false
nodeImageAnalyzer:
  deploy: false
  image:
    repository: sysdig/node-image-analyzer
    tag: 0.1.29
    digest: null
    pullPolicy: IfNotPresent
    # pullSecrets:
    #   - name: myRegistrKeySecretName
  settings:
    # The Docker socket path.
    # If a custom path is specified, ensure it is correctly mounted from the host inside the container.
    # dockerSocketPath: unix:///var/run/docker.sock
    # The socket path to a CRI compatible runtime, such as CRI-O.
    # If a custom path is specified, ensure it is correctly mounted from the host inside the container.
    # criSocketPath: unix:///var/run/crio/crio.sock
    # The socket path to a CRI-Containerd daemon.
    # If a custom path is specified, ensure it is correctly mounted from the host inside the container.
    # containerdSocketPath: unix:///var/run/containerd/containerd.sock
    # The endpoint to the Scanning Analysis collector, specified in the following format:
    # https://<API_ENDPOINT>/internal/scanning/scanning-analysis-collector
    # * SaaS default region (US East): leave empty
    # * SaaS US Web: https://us2.app.sysdig.com/internal/scanning/scanning-analysis-collector
    # * SaaS European Union: https://eu1.app.sysdig.com/internal/scanning/scanning-analysis-collector
    # * On-Prem: https://sysdig.my.company.com/internal/scanning/scanning-analysis-collector
    # collectorEndpoint: https://sysdig.my.company.com/internal/scanning/scanning-analysis-collector
    # Can be set to false to allow insecure connections to the Sysdig backend,
    # such as for on-premise installs that use self-signed certificates.
    # By default, certificates are always verified.
    # sslVerifyCertificate: false
    # Can be set to true to show debug logging, useful for troubleshooting.
    debug: false
    # Proxy configuration variables. See also: [Running Node Image Analyzer Behind a Proxy](https://docs.sysdig.com/en/scan-running-images.html#UUID-b3b07aa6-db02-eb58-050f-15c9e053bb64_section-idm232105909710949)
    httpProxy: null
    httpsProxy: null
    noProxy: null
  # Allow sysdig Node Image Analyzer to run on Kubernetes 1.6 masters
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
  # Allow passing extra volumes to the Node Image Analyzer to mount docker socket, cri-o socket, etc.
  extraVolumes:
    volumes: []
    mounts: []
    # Example:
    # volumes:
    # - name: docker-sock
    #   hostPath:
    #     path: /var/run/docker.sock
    # mounts:
    # - mountPath: /var/run/docker.sock
    #   name: docker-sock
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1024Mi
  # Set daemonset priorityClassName
  priorityClassName: null
  # Allow the DaemonSet to schedule using affinity rules
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                  - amd64
              - key: kubernetes.io/os
                operator: In
                values:
                  - linux
          - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                  - amd64
              - key: beta.kubernetes.io/os
                operator: In
                values:
                  - linux
# Override value for the NATS service endpoint
natsUrl: ""
kspm:
  deploy: false
nodeAnalyzer:
  # Create node analyzer specific serviceAccount resource
  serviceAccount:
    create: true
    # Use this value as nodeAnalyzerServiceAccountName
    name: "node-analyzer"
  deploy: true
  # The API endpoint for Sysdig Secure, specified with no protocol:
  # * SaaS default region (US East): secure.sysdig.com
  # * SaaS US Web: us2.app.sysdig.com
  # * SaaS European Union: eu1.app.sysdig.com
  # * On-Prem: sysdig.my.company.com
  apiEndpoint: ""
  # Can be set to false to allow insecure connections to the Sysdig backend,
  # such as for on-premise installs that use self-signed certificates.
  # By default, certificates are always verified.
  # sslVerifyCertificate: false
  # Can be set to true to show debug logging, useful for troubleshooting.
  debug: false
  # Proxy configuration variables. See also: [Running Node Analyzer Behind a Proxy](https://docs.sysdig.com/en/node-analyzer--multi-feature-installation.html#UUID-35c14c46-b327-c2a8-ed9c-82a2af995218_section-idm51621039128136)
  httpProxy: null
  httpsProxy: null
  noProxy: null
  # Allow sysdig Node Image Analyzer to run on Kubernetes 1.6 masters
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoSchedule
      key: node-role.kubernetes.io/controlplane
      operator: Equal
      value: "true"
    - effect: NoExecute
      key: node-role.kubernetes.io/etcd
      operator: Equal
      value: "true"
  # Set nodeAnalyzer daemonset priorityClassName
  priorityClassName: null
  # Allow the DaemonSet to set labels
  labels: {}
  # Use this pullSecret to pull images from a private registry
  # pullSecrets:
  #   - name: myRegistryKeySecretName
  nodeSelector: {}
  # Allow the DaemonSet to schedule using affinity rules
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                  - amd64
              - key: kubernetes.io/os
                operator: In
                values:
                  - linux
          - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                  - amd64
              - key: beta.kubernetes.io/os
                operator: In
                values:
                  - linux
  imageAnalyzer:
    deploy: true
    image:
      repository: sysdig/node-image-analyzer
      tag: 0.1.29
      digest: null
      pullPolicy: IfNotPresent
    # The Docker socket path.
    # If a custom path is specified, ensure it is correctly mounted from the host inside the container.
    # dockerSocketPath: unix:///var/run/docker.sock
    # The socket path to a CRI compatible runtime, such as CRI-O.
    # If a custom path is specified, ensure it is correctly mounted from the host inside the container.
    # criSocketPath: unix:///var/run/crio/crio.sock
    # The socket path to a CRI-Containerd daemon.
    # If a custom path is specified, ensure it is correctly mounted from the host inside the container.
    # containerdSocketPath: unix:///var/run/containerd/containerd.sock
    # Allow passing extra volumes to the Node Image Analyzer to mount docker socket, cri-o socket, etc.
    extraVolumes:
      volumes: []
      mounts: []
      # Example:
      # volumes:
      # - name: docker-sock
      #   hostPath:
      #     path: /var/run/docker.sock
      # mounts:
      # - mountPath: /var/run/docker.sock
      #   name: docker-sock
      # example for bottlerocket
      # volumes:
      #  - name: socketpath
      #    hostPath:
      #      path: /run/dockershim.sock
      #      type: ""
    resources:
      requests:
        cpu: 150m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1536Mi
    env: {}
  hostAnalyzer:
    deploy: true
    image:
      repository: sysdig/host-analyzer
      tag: 0.1.17
      digest: null
      pullPolicy: IfNotPresent
    # The scanning schedule specification for the host analyzer expressed as a crontab string such as “5 4 * * *”.
    # The default value of @dailydefault instructs the analyzer to automatically pick a schedule that will start
    # shortly after it is deployed and will perform a scan every 24 hours.
    schedule: "@dailydefault"
    # The list of directories to inspect during the scan, expressed as a comma separated list.
    # dirsToScan: "/etc,/var/lib/dpkg,/usr/local,/usr/lib/sysimage/rpm,/var/lib/rpm,/lib/apk/db"
    # The number of times the analysis collector is allowed to retry sending results if backend communication fails.
    # maxSendAttempts: 3
    resources:
      requests:
        cpu: 150m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1536Mi
    env: {}
  benchmarkRunner:
    deploy: true
    includeSensitivePermissions: false
    image:
      repository: sysdig/compliance-benchmark-runner
      tag: 1.1.0.8
      digest: null
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 150m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 256Mi
    env: {}
  runtimeScanner:
    deploy: false
    image:
      repository: sysdig/vuln-runtime-scanner
      tag: 1.6.3
      digest: null
      pullPolicy: IfNotPresent
    extraMounts: []
    # example for bottlerocket
    # extraMounts:
    #   - name: socketpath
    #     mountPath: /var/run/containerd/containerd.sock
    resources:
      requests:
        cpu: 150m
        memory: 512Mi
        ephemeral-storage: "2Gi"
      limits:
        cpu: 1000m
        memory: 2Gi
        ephemeral-storage: "4Gi"
    env: {}
    settings:
      eveEnabled: false
      # Threshold for which images will be skipped in the analysis.
      # Size is in bytes, default is not set (don't skip)
      # maxImageSizeAllowed: ""
      # Threshold for which files will be skipped in the analysis.
      # Fine tune this parameter if you have large files that needs to be analyzed (eg: big .JAR files)
      # Size is in bytes, default is 250MB
      maxFileSizeAllowed: "262144000"
    eveConnector:
      deploy: false
      image:
        repository: sysdig/eveclient-api
        tag: 1.1.2
        digest: null
        pullPolicy: IfNotPresent
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 1000m
          memory: 512Mi
      settings:
        replicas: 1
  kspmAnalyzer:
    debug: false
    image:
      repository: sysdig/kspm-analyzer
      tag: 1.9.0
      digest: null
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 150m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 1536Mi
    env: {}
kspmCollector:
  debug: false
  image:
    repository: sysdig/kspm-collector
    tag: 1.9.0
    digest: null
    pullPolicy: IfNotPresent
  settings:
    replicas: 1
    namespaces:
      included: ""
      excluded: ""
    workloads:
      included: ""
      excluded: ""
    healthIntervalMin: 5
  resources:
    requests:
      cpu: 150m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1536Mi
  env: {}
customAppChecks: {}
# Allow passing custom app checks for Sysdig Agent.
# Example:
#
# sample.py: |-
#   from checks import AgentCheck
#
#   class MyCustomCheck(AgentCheck):
#       def check(self, instance):
#           self.gauge("testhelm", 1)
# Promscrape prometheus.yaml not configured by default
prometheus:
  file: false
  yaml: {}
extraVolumes:
  volumes: []
  mounts: []
  # Allow passing extra volumes to the agent to mount secrets or certificates
  # to authenticate in different services.
  # Any kind of volume can be passed. Example:
  #
  # extraVolumes:
  #   volumes:
  #     - name: sysdig-new-cm
  #       configMap:
  #         name: my-cm
  #         optional: true
  #     - name: sysdig-new-secret
  #       secret:
  #         secretName: my-secret
  #   mounts:
  #     - mountPath: /opt/draios/cm
  #       name: sysdig-new-cm
  #     - mountPath: /opt/draios/secret
  #       name: sysdig-new-secret
extraSecrets: []
# Allow passing extra secrets that can be mounted via extraVolumes
#
# extraSecrets:
#   - name: sysdig-new-secret
#     data:
#       sysdig-new-password-key1: bXlwYXNzd29yZA==
#       sysdig-new-password-key2: bXlwYXNzd29yZA==
# Allow sysdig to run on Kubernetes 1.6 masters.
tolerations:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
  - effect: NoSchedule
    key: node-role.kubernetes.io/control-plane
  - effect: NoSchedule
    key: node-role.kubernetes.io/controlplane
    operator: Equal
    value: "true"
  - effect: NoExecute
    key: node-role.kubernetes.io/etcd
    operator: Equal
    value: "true"
leaderelection:
  enable: false
