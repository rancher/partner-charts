{
    "all":{
      "DATA_PERSISTANCE":"Internal Error; (Failed to store data)",
      "DATA_RETRIVE":"Internal Error; (Failed to retrive data)",
      "INTERNAL_SERVER":"Internal Error; Unable to communicate with internal-server",
      "INTERNAL_SERVER_ERROR":"Internal Error; Try after sometime",
      "RESOURCE_NOT_FOUND":"Resource '%s' does not exist",
      "ERROR_HITTING_EXT_API":"Unable to communicate with external resources",
      "SOMETHING_WRONG": "Internal Error",
      "INTERNAL_DB_COPY": "Could not format response from database object.",
      "INPUT_PAYLOAD_ERROR":"Input payload have error: %s",
      "GEN_UNMARSHAL_ERROR":"Error in unmarshal '%s'",
      "STRING_TO_INT_ERROR":"Error in converting string to int '%s'",
      "FIELD_VALIDATION":"InvalidValidationError '%s'",
      "MARSHAL_ERROR":"Error in marshaling '%s'",
      "ALREADY_EXIST":"'%s' already exists",
      "MISSING_FIELD":"Invalid input or missing mandatory field '%s'",
      "MISSING_FIELD_INSIDE":"Invalid input or missing mandatory field '%s' inside '%s'",
      "INVALID_VALUE":"Invalid input for field '%s'",
      "INVALID_TYPE":"Invalid input type for '%s'",
      "INPUT_MISMATCH":"Given input JSON structure is mismatched",
      "KEY_NOT_FOUND":" '%s' Key not found in Json",
      "VALUE_NOT_FOUND":" '%s' Value not found in Json",
      "UNSUPPORTED": "Given %s is not supported",
      "UNMARSHAL_ERROR":"The field '%s' is a '%s' type, but the given value is '%s' type",
      "UNKNOWN_UNMARSHAL_ERROR":"The expected type is a '%s', but the given value is '%s' type"
    },
    "clusterManager":{
      "CLUSTER_NOTFOUND":"The requested cluster '%s' is not found",
      "NAME_EXISTS":"This Cluster Name '%s' is already exists. use another name",
      "CLOUD_ACCOUNT_NOTFOUND":"Cluster.Kube.CloudAccount.ID '%s' Not valid",
      "DEP_REF_ALREADY_EXISTS":"This Depency Reference Id '%s' version '%s' is already exists"
      
    },
    "eks":{
      "NODE_POOL_LENGTH":"Encountered invalid input: Cluster.Kube.EKS.Nodepool array length must be one",
      "NODE_POOL_NAME":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].Name cannot be empty",
      "NODE_POOL_INSTANCETYPE":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].InstanceType Should be valid",
      "NODE_POOL_AMITYPE":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].AMIType must be one of 'AL2_x86_64','AL2_x86_64_GPU','AL2_ARM_64'",
      "NODE_POOL_DESIREDCAPACITY":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].DesiredCapacity should not be empty",
      "NODE_POOL_DISKSIZE":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].DiskSize should not be empty",
      "NODE_POOL_KEYNAME":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].KeyName should not be empty",
      "NODE_POOL_MAXCOUNT":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].MaxCount should not be empty",
      "NODE_POOL_MINCOUNT":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].MinCount should not be empty",
      "NODE_POOL_REGION":"Encountered invalid input: Cluster.Kube.EKS.VPCBlock.Region should be valid",
      "VPC_CIDR":"Encountered invalid input: Cluster.Kube.EKS.VPCBlock.CIDR Should be valid",
      "SUBNET_LENGTH":"Encountered invalid input: Cluster.Kube.EKS.VPC.Subnet length should be 3. if region is ca-central-1 length should be 2",
      "SUBNET_CIDR":"Encountered invalid input: Cluster.Kube.EKS.Subnet['%s'].CIDR Should be valid",
      "SUBNET_AZ":"Encountered invalid input: Cluster.Kube.EKS.Subnet['%s'].AZ should be one of %s",
      "NODEPOOL_AZ":"Encountered invalid input: Cluster.Kube.EKS.NodePool[0].AZ need atleast one availability Zones",
      "NODE_POOL_ROLE":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].NodePoolRole.RoleArn should not be empty",
      "MASTER_ROLE":"Encountered invalid input: Cluster.Kube.EKS.MasterRole.RoleArn should not be empty",
      "MASTER_VERSION":"Encountered invalid input: Cluster.Kube.Version Should be valid",
      "STORIDGE_NODEPOOL_MINCOUNT":"Encountered invalid input: Cluster.Kube.EKS.NodePool[0].MinCount should not be greater than 2",
      "NODE_POOL_AMIIMAGE":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].AMIImageID should not be empty",
      "NODE_POOL_ROLEARN":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].NodePoolRole.RoleArn should be valid"
    },
    "aks":{
      "NODE_POOL_LENGTH":"Encountered invalid input: Cluster.Kube.AKS.Nodepool array length must be one",
      "NODE_POOL_NAME":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].Name cannot be empty",
      "NODE_POOL_INSTANCETYPE":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].InstanceType Should be valid",
      "NODE_POOL_COUNT":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].Count should not be empty",
      "NODE_POOL_NODE_RESOURCE_GROUP":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].NodeResourceGroup should not be empty",
      "NODE_POOL_TYPE":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].Type should be one of VirtualMachineScaleSets, AvailabilitySet",
      "NODE_POOL_DISKSIZE":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].DiskSize should not be empty",
      "NODE_POOL_MAXCOUNT":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].MaxCount should not be empty",
      "NODE_POOL_MINCOUNT":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].MinCount should not be empty",
      "NODE_POOL_REGION":"Encountered invalid input: Cluster.Kube.AKS.Location should be valid",
      "AKS_RESOURCE_GROUP_NAME":"Encountered invalid input: Cluster.Kube.AKS.ResourceGroupName should not be empty",
      "AKS_SUBSCRIPTION_ID":"Encountered invalid input: Cluster.Kube.AKS.SubscriptionID should not be empty",
      "NODE_POOL_OSTYPE":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].OSType should be one of Linux, Windows",
      "NODE_POOL_AZ":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].AZ should be in the format ['1','2','3']",
      "NODE_POOL_RS":"Encountered invalid input: Cluster.Kube.AKS.NetworkProfile.LoadBalancerSku not 'standard' so cannot create a nodepool with availability zones",
      "SKU_TIER":"Encountered invalid input: Cluster.Kube.AKS.SKU.Tier should be one of Free, Paid",
      "LBSKU":"Encountered invalid input: Cluster.Kube.AKS.NetworkProfile.LoadBalancerSku should be one of basic, standard",
      "NODE_POOL_MODE":"Encountered invalid input: Cluster.Kube.AKS.Nodepool[0].Mode Should be one of User, System",
      "NODE_POOL_NAME_VALID":"Encountered invalid input: AKSNodepool.Name Should be 1-12 charecters and lowercase.",
      "RS_METRIC_NAME":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].MetricName not available",
      "RS_AGGREGATION_TYPE":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].AggregationType not available",
      "RS_OPERATOR":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Operator not available",
      "RS_DURATION_TO_WATCH":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].DurationToWatch not available",
      "RS_VERB":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Verb not available",
      "RS_COUNT":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Count not available",
      "RS_CAPACITY":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Capacity not available",
      "RS_SCALE_TYPE":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].ScaleType not available",
      "RS_TIME_WINDOW":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].TimeWindow not available",
      "RS_COOLDOWN":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].CoolDown not available",
      "RS_STATISTIC":"Encountered invalid input: Cluster.Kube.AKS.NodePool[0].AutoScale.RuleSets[%s].Statistic not available"

    },
    "gke":{
      "NODE_POOL_LENGTH":"Encountered invalid input: Cluster.Kube.GKE.Nodepool array length must be one",
      "NODE_POOL_NAME":"Encountered invalid input: Cluster.Kube.GKE.Nodepool[0].Name cannot be empty",
      "NODE_POOL_INSTANCETYPE":"Encountered invalid input: Cluster.Kube.GKE.Nodepool[0].InstanceType Should be valid",
      "NODE_POOL_COUNT":"Encountered invalid input: Cluster.Kube.EKS.Nodepool[0].InitialNodeCount should not be empty",
      "NODE_POOL_DISKSIZE":"Encountered invalid input: Cluster.Kube.GKE.Nodepool[0].DiskSize should not be empty",
      "NODE_POOL_MAXCOUNT":"Encountered invalid input: Cluster.Kube.GKE.Nodepool[0].MaxCount should not be empty",
      "NODE_POOL_MINCOUNT":"Encountered invalid input: Cluster.Kube.GKE.Nodepool[0].MinCount should not be empty",
      "NODE_POOL_REGION":"Encountered invalid input: Cluster.Kube.GKE.Location['%s'] should be valid",
      "PROJECTID_NOTFOUND":"Encountered invalid input: Cluster.Kube.GKE.ProjectID should not be empty"
    },
    "external":{
      "IP_NOT_FOUND":"Encountered invalid input: Cluster.Kube.IP should not be empty",
      "AUTH_TYPE":"Encountered invalid input: Cluster.Kube.AuthType should be one of password, config",
      "USERNAME_NOTFOUND":"Encountered invalid input: Cluster.Kube.Auth.Basic.Username should not be empty",
      "PASSWORD_NOTFOUND":"Encountered invalid input: Cluster.Kube.Auth.Password should not be empty",
      "CONFIG_NOTFOUND":"Encountered invalid input: Cluster.Kube.Auth.Config.Config should not be empty",
      "PORT_NOTFOUND":"Encountered invalid input: Cluster.Kube.Port should not be empty"
    },
    "eksnodepool":{
      "NODE_POOL_NAME":"Encountered invalid input: EKSNodepool.Name cannot be empty",
      "NODE_POOL_INSTANCETYPE":"Encountered invalid input: EKSNodepool.InstanceType Should be valid",
      "NODE_POOL_AMITYPE":"Encountered invalid input: EKSNodepool.AMIType must be one of 'AL2_x86_64','AL2_x86_64_GPU','AL2_ARM_64'",
      "NODE_POOL_DESIREDCAPACITY":"Encountered invalid input: EKSNodepool.DesiredCapacity should not be empty",
      "NODE_POOL_DISKSIZE":"Encountered invalid input: EKSNodepool.DiskSize should not be empty",
      "NODE_POOL_KEYNAME":"Encountered invalid input: EKSNodepool.KeyName should not be empty",
      "NODE_POOL_MAXCOUNT":"Encountered invalid input: EKSNodepool.MaxCount should not be empty",
      "NODE_POOL_MINCOUNT":"Encountered invalid input: EKSNodepool.MinCount should not be empty",
      "SUBNET_AZ":"Encountered invalid input: EKSNodepool.AZ need atleast one availability Zones",
      "NODE_POOL_ROLE":"Encountered invalid input: EKSNodepool.NodePoolRole.RoleArn should not be empty",
      "STORIDGE_NODEPOOL_MINCOUNT":"Encountered invalid input: EKSNodepool.Mincount should not be greater than 2",
      "NODE_POOL_ROLEARN":"Encountered invalid input: EKSNodepool.NodePoolRole.RoleArn should be valid",
      "NODE_POOL_AMIIMAGE":"Encountered invalid input: EKSNodepool.AMIImageID should not be empty"
    },
    "aksnodepool":{
      "NODE_POOL_NAME":"Encountered invalid input: AKSNodepool.Name Should be 1-12 charecters and lowercase.",
      "NODE_POOL_NAME_VALID":"Encountered invalid input: AKSNodepool.Name cannot be empty",
      "NODE_POOL_INSTANCETYPE":"Encountered invalid input: AKSNodepool.InstanceType Should be valid",
      "NODE_POOL_COUNT":"Encountered invalid input: AKSNodepool.Count should not be empty",
      "NODE_POOL_DISKSIZE":"Encountered invalid input: AKSNodepool.DiskSize should not be empty",
      "NODE_POOL_MAXCOUNT":"Encountered invalid input: AKSNodepool.MaxCount should not be empty",
      "NODE_POOL_MINCOUNT":"Encountered invalid input: AKSNodepool.MinCount should not be empty",
      "NODE_POOL_RESOURCE_GROUP":"Encountered invalid input: AKSNodepool.NodeResourceGroup Should not be empty",
      "NODE_POOL_TYPE":"Encountered invalid input: AKSNodepool.Type should be one of VirtualMachineScaleSets, AvailabilitySet",
      "NODE_POOL_OSTYPE":"Encountered invalid input: AKSNodepool.OSType should be one of Linux, Windows",
      "NODE_POOL_AZ":"Encountered invalid input: AKSNodepool.AZ should be in the format ['1','2','3']",
      "NODE_POOL_MODE":"Encountered invalid input: AKSNodepool.Mode Should be one of User, System",
      "RS_METRIC_NAME":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].MetricName not available",
      "RS_AGGREGATION_TYPE":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].AggregationType not available",
      "RS_OPERATOR":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Operator not available",
      "RS_DURATION_TO_WATCH":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].DurationToWatch not available",
      "RS_VERB":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Verb not available",
      "RS_COUNT":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Count not available",
      "RS_CAPACITY":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Capacity not available",
      "RS_SCALE_TYPE":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].ScaleType not available",
      "RS_TIME_WINDOW":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].TimeWindow not available",
      "RS_COOLDOWN":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].CoolDown not available",
      "RS_STATISTIC":"Encountered invalid input: AKSNodepool.AutoScale.RuleSets[%s].Statistic not available"
    },
    "gkenodepool":{
      "NODE_POOL_NAME":"Encountered invalid input: GKENodepool.Name cannot be empty",
      "NODE_POOL_INSTANCETYPE":"Encountered invalid input: GKENodepool.InstanceType Should be valid",
      "NODE_POOL_COUNT":"Encountered invalid input: GKENodepool.InitialNodeCount should not be empty",
      "NODE_POOL_DISKSIZE":"Encountered invalid input: GKENodepool.DiskSize should not be empty",
      "NODE_POOL_MAXCOUNT":"Encountered invalid input: GKENodepool.MaxCount should not be empty",
      "NODE_POOL_MINCOUNT":"Encountered invalid input: GKENodepool.MinCount should not be empty"
    },

    "activity":{
      "ACTIVITY_NOTFOUND":"The requested activity '%s' is not found"
    }
}