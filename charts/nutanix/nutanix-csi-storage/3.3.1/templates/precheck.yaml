apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.Release.Name}}-precheck-serviceaccount
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation,hook-failed
    "helm.sh/hook": pre-upgrade,pre-install
    "helm.sh/hook-weight": "0"
  labels:
    app: {{.Release.Name}}-precheck
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{.Release.Name}}-precheck-role
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation,hook-failed
    "helm.sh/hook": pre-upgrade,pre-install
    "helm.sh/hook-weight": "0"
  labels:
    app: {{.Release.Name}}-precheck
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "update", "create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{.Release.Name}}-precheck-binding
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation,hook-failed
    "helm.sh/hook": pre-upgrade,pre-install
    "helm.sh/hook-weight": "0"
  labels:
    app: {{.Release.Name}}-precheck
subjects:
  - kind: ServiceAccount
    name: {{.Release.Name}}-precheck-serviceaccount
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{.Release.Name}}-precheck-role
  apiGroup: rbac.authorization.k8s.io


{{- if eq .Values.createSecret true }}

{{- $errCmd := "(PE credentials) are required, if createSecret is set to true" }}

{{- $username := .Values.username | required (printf "username%s" $errCmd) }}
{{- $password := .Values.password | required (printf "password%s" $errCmd) }}
{{- $prismEndPoint := .Values.prismEndPoint | required (printf "prismEndPoint%s" $errCmd) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.Release.Name}}-precheck-pe-secret
  annotations:
    "helm.sh/hook": pre-upgrade,pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation,hook-failed
  labels:
    app: {{.Release.Name}}-precheck
data:
    key: {{ printf "%s:9440:%s:%s" .Values.prismEndPoint .Values.username .Values.password | b64enc}}
{{- end }}

{{- if eq .Values.createPrismCentralSecret true }}

{{- $pcUsername := .Values.pcUsername | required "pcUsername is required to create secret." }}
{{- $pcPassword := .Values.pcPassword | required "pcPassword is required to create secret." }}
{{- $prismCentralEndPoint := .Values.prismCentralEndPoint | required "prismCentralEndPoint is required to create secret." }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.Release.Name}}-precheck-pc-secret
  annotations:
    "helm.sh/hook": pre-upgrade,pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation,hook-failed
  labels:
    app: {{.Release.Name}}-precheck
data:
  # base64 encoded prism-ip:prism-port:admin:password. 
  # E.g.: echo -n "10.83.0.91:9440:admin:mypassword" | base64
  key: {{ printf "%s:9440:%s:%s" .Values.prismCentralEndPoint .Values.pcUsername .Values.pcPassword | b64enc}}
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{.Release.Name}}-precheck-job
  annotations:
    "helm.sh/hook": pre-upgrade,pre-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
  labels:
    app: {{.Release.Name}}-precheck
spec:
  template:
    metadata:
      name: {{.Release.Name}}-precheck-job
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      serviceAccountName: {{.Release.Name}}-precheck-serviceaccount
      containers:
        - name: ntnx-csi-precheck
          image: {{ .Values.precheck.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: CSI_PC_SECRET_DIR
              value: "/var/run/prechek-pc-secret-dir"
            {{- if .Values.createSecret }}
            - name: CSI_PE_SECRET_DIR
              value: "/var/run/prechek-pe-secret-dir"
            {{- end }}
            - name: CSI_CATEGORY_CONFIGMAP_NAME
              value: {{ .Values.csiCategoryConfigmapName }}
            - name: CSI_CATEGORY_CONFIGMAP_NAMESPACE
              {{- if .Values.csiCategoryConfigmapNamespace }}
              value: {{ .Values.csiCategoryConfigmapNamespace }}
              {{- else }}
              value: {{ .Release.Namespace }}
              {{- end }}
            - name: CSI_CATEGORYID_CONFIGMAP_NAME
              value: {{.Release.Name}}-category-id
            - name: PRECHECK_CONFIGMAP_NAME
              value: {{.Release.Name}}-precheck-configmap
            - name: RELEASE_NAMESPACE
              value: {{.Release.Namespace}}
            - name: MIN_SUPPORTED_PC_VERSION
              value: {{.Values.minSupportedPCVersion}}
            - name: USE_PC
              {{- if eq .Values.ntnxInitConfigMap.usePC true }}
              value: "true"
              {{- else }}
              value: "false"
              {{- end }}
          volumeMounts:
            {{- if eq .Values.ntnxInitConfigMap.usePC true}}
            - mountPath: /var/run/prechek-pc-secret-dir
              name: precheck-pc-secret
              readOnly: true
            {{- end }}
            {{- if .Values.createSecret }}
            - mountPath: /var/run/prechek-pe-secret-dir
              name: precheck-pe-secret
              readOnly: true
            {{- end }}
      volumes:
        {{- if eq .Values.ntnxInitConfigMap.usePC true}}
        - name: precheck-pc-secret
          secret:
            {{- if .Values.createPrismCentralSecret }}
            secretName: {{.Release.Name}}-precheck-pc-secret
            {{- else }}
            secretName: {{.Values.pcSecretName}}
            {{- end }}
        {{- end }}
        {{- if .Values.createSecret }}
        - name: precheck-pe-secret
          secret:
            secretName: {{.Release.Name}}-precheck-pe-secret
        {{- end }}
  backoffLimit: 0

