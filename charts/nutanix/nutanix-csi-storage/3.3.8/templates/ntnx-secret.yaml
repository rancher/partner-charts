{{- if eq .Values.kindtest false }}
{{- if eq .Values.createSecret true }}

{{- $errCmd := "(PE credentials) are required, if createSecret is set to true" }}

{{- $username := .Values.username | required (printf "username%s" $errCmd) }}
{{- $password := .Values.password | required (printf "password%s" $errCmd) }}
{{- $prismEndPoint := .Values.prismEndPoint | required (printf "prismEndPoint%s" $errCmd) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.peSecretName }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "nutanix-csi-storage.labels" . | nindent 4 }}
  annotations:
    nutanix.com/csi-auth-schema-version: "v1"
stringData:
  key: {{ printf "%s:9440:%s:%s" $prismEndPoint $username $password | quote }}
{{- if .Values.filesKey }}
{{- $filesUsername := .Values.filesKey.username | required "files username is required to create files-key." }}
{{- $filesPassword := .Values.filesKey.password | required "files password is required to create files-key." }}
{{- $filesEndPoint := .Values.filesKey.endpoint | required "files endpoint is required to create files-key." }}
  files-key: {{ printf "%s:%s:%s" .Values.filesKey.endpoint .Values.filesKey.username .Values.filesKey.password }}
{{- end }}
{{- end }}

{{- $authType := .Values.authType | default "basic-auth" }}

{{- $serviceAccountNotSupportedError := printf "%s%s"
"Service account authentication is not supported when using PE as the management plane. "
"Please update the deployment mode by setting Values.ntnxInitConfigMap.usePC or change Values.authType to basic-auth" }}

{{- if and (eq .Values.ntnxInitConfigMap.usePC false) (eq $authType "service-auth") }}
  {{- fail $serviceAccountNotSupportedError }}
{{- end }}

{{- if eq .Values.createPrismCentralSecret true }}
{{- $prismCentralEndPoint := .Values.prismCentralEndPoint | required "prismCentralEndPoint is required to create secret." }}

# Create PC secret for basic-auth type of authentication
{{- if eq $authType "basic-auth" }}
{{- $pcUsername := .Values.pcUsername | required "pcUsername is required to create secret." }}
{{- $pcPassword := .Values.pcPassword | required "pcPassword is required to create secret." }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.pcSecretName }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "nutanix-csi-storage.labels" . | nindent 4 }}
  annotations:
    nutanix.com/csi-auth-schema-version: "v1"
stringData:
  key: {{ printf "%s:9440:%s:%s" $prismCentralEndPoint $pcUsername $pcPassword | quote }}
{{- end }}

# Create PC secret for service-auth type of authentication
{{- if eq $authType "service-auth" }}
{{- $keyType := .Values.keyType | required "keyType is required to create secret." }}
{{- $keyValue := .Values.keyValue | required "keyValue is required to create secret." }}
{{- $pcUsername := .Values.pcUsername | default "" }}
{{- $pcPassword := .Values.pcPassword | default "" }}

# Ensures backward compatibility with NDK 1.3 when using CSI 3.5 with a service account,
# because NDK 1.3 supports only basic auth.
{{- $basicAuthKeyStr := "" }}
{{- if and (ne $pcUsername "") (ne $pcPassword "") }}
{{- $basicAuthKeyStr = printf "%s:9440:%s:%s" $prismCentralEndPoint $pcUsername $pcPassword }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.pcSecretName }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "nutanix-csi-storage.labels" . | nindent 4 }}
  annotations:
    nutanix.com/csi-auth-schema-version: "v2"
stringData:
  {{- if ne $basicAuthKeyStr "" }}
  key: {{ $basicAuthKeyStr }}
  {{- end }}
  host: {{ $prismCentralEndPoint }}
  port: "9440"
  auth_type: service-auth
  key_type: {{ $keyType }}
  key_value: {{ $keyValue }}
{{- end }}
{{- end }}
{{- end }}