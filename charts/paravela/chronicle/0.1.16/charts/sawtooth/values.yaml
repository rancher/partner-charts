---
## @md # Sawtoooth
## @md
## @md | field | description | default |
## @md |-|-|-|

affinity:
  ## @md | `affinity.enabled` | false: no effect   true: then validators will be deployed only to k8s nodes with the label `app={{ .sawtooth.networkName }}-validator` | false  |
  # Normally set this as disabled.
  # If false - no effect, validators are run on every ( or in the case of devmode any one)
  # node in the cluster.
  # If True, then validators will be deployed only to k8s nodes with the label
  #       app={{ .sawtooth.networkName }}-validator
  enabled: false

global:
  logLevel: warn
  image:
    registry:
    tag:


## @md | `commonLabels` |
commonLabels: {}
commonAnnotations: {}
# This is optional,
# if false the values are ignored,
# if true then there should exist a secret within the namespace
#   of the given names, multiple values are acceptable
hostAliases:
imagePullSecrets:
  ## @md | `imagePullSecrets.enabled` | if true use the list of named imagePullSecrets | false |
  enabled: false
  ## @md | `imagePullSecrets.value` | a list if named secret references of the form   ```- name: secretName```| [] |
  value: []
ingress:
  ## @md | `ingress.apiVersion` | if necessary the apiVersion of the ingress may be overridden | "" |
  apiVersion: ""
  ## @md | `ingress.enabled` | true to enable the ingress to the main service rest-api | false |
  enabled: false
  ## @md | `ingress.certManager` | true to enable the acme certmanager for this ingress | false |
  certManager: false
  ## @md | `ingress.hostname` | primary hostname for the ingress | false |
  hostname: "sawtooth.local"
  ## @md | `ingress.path` | path for the ingress's primary hostname | / |
  path: /
  ## @md | `ingress.pathType` | pathType for the ingress's primary hostname | nil |
  pathType:
  ## @md | `ingress.annotations` | annotations for the ingress | {} |
  annotations: {}
  ## @md | `ingress.tls` | true to enable tls on the ingress with a secrete at hostname-tls | false |
  tls: false
  ## @md | `ingress.extraHosts` | list of extra hosts to add to the ingress | [] |
  extraHosts: []
  ## @md | `ingress.extraPaths` | list of extra paths to add to the primary host of the ingress | [] |
  extraPaths: []
  ## @md | `ingress.extraTls` | list of extra tls entries | [] |
  extraTls: []
pagerduty:
  ## @md | `pagerduty.enabled` | if true send pagerduty alerts | false |
  enabled: false
  ## @md | `pagerduty.token` | pagerduty user token | nil |
  token:
  ## @md | `pagerduty.serviceid` | pagerduty serviceid | nil |
  serviceid:
sawtooth:
  opentsdb:
    ## @md | `sawtooth.opentsdb.db` | name of the opentsdb database to be used | metrics |
    db: metrics
    ## @md | `sawtooth.opentsdb.url` | url of the opentsdb database to be used | nil |
    url:
    ## @md | `sawtooth.opentsdb.enabled` | whether to enable the opentsdb metrics | false |
    enabled: false
  statefulset:
    enabled: true
    replicas:
    podAnnotations:
  ## @md | `sawtooth.minReadySeconds` | the minimum time a pod must be Running before proceeding on a rolling update | 120 |
  minReadySeconds: 120
  ## @md | `sawtooth.maxUnavailable` | maximum number of pods allowed down on a rollout or update  | 1 |
  maxUnavailable: 1
  containers:
    block_info:
      ## @md | `sawtooth.containers.block_info.args` | extra args for block-info-tp | nil |
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-block-info-tp
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    devmode_engine:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-devmode-engine-rust
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    identity_tp:
      ## @md | `sawtooth.containers.identity_tp.args` | extra args for identity-tp | nil |
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-identity-tp
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    intkey_tp:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-intkey-tp-go
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    monitor:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-shell
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "100m"
        requests:
          cpu: "100m"
    pbft_engine:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-pbft-engine
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    poet_engine:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-poet-engine
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    poet_validator_registry_tp:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-poet-validator-registry-tp
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    poet_registration:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-poet-cli
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    raft_engine:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-raft-engine
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    rest_api:
      ## @md | `sawtooth.containers.rest_api.args` | extra args for rest-api | nil |
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-rest-api
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    seth_rpc:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-seth-rpc
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    seth_tp:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-seth-tp
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    settings_tp:
      ## @md | `sawtooth.containers.settings_tp.args` | extra args for settings-tp | nil |
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-settings-tp
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    smallbank_tp:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-smallbank-tp-go
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
    validator:
      ## @md | `sawtooth.containers.validator.args` | extra args for validator | nil |
      args:
      ## @md | `sawtooth.containers.validator.env` | list of environment name/value dicts | nil |
      env:
        - name: RUST_BACKTRACE
          value: "1"
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-validator
        tag: BTP2.1.0
      logLevel:
      resources: {}
    xo_tp:
      args:
      env:
      image:
        pullPolicy:
        registry:
        repository: blockchaintp/sawtooth-xo-tp-go
        tag: BTP2.1.0
      logLevel:
      resources:
        limits:
          cpu: "250m"
        requests:
          cpu: "50m"
  perNodeServiceType: ClusterIP
  persistence:
    enabled: true
    annotations:
    accessModes:
      - "ReadWriteOnce"
    storageClass:
    size: 40Gi
  ports:
    ## @md | `sawtooth.ports.sawnet` | port for the sawtooth validator network | 8800 |
    sawnet: 8800
    ## @md | `sawtooth.ports.consensus` | port for the sawtooth consensus network | 5050 |
    consensus: 5050
    ## @md | `sawtooth.ports.sawcomp` | port for the sawtooth component network | 4004 |
    sawcomp: 4004
    ## @md | `sawtooth.ports.rest` | port for the sawtooth rest-api | 8008 |
    rest: 8008
  livenessProbe:
    ## @md | `sawtooth.livenessProbe.enabled` | whether to run the livenessProbe on the validator | false |
    enabled: false
    ## @md | `sawtooth.livenessProbe.initialDelaySeconds` | seconds to wait before running the liveness probe the first time | 300 |
    initialDelaySeconds: 300
    ## @md | `sawtooth.livenessProbe.periodSeconds` | interval in seconds to re-run the liveness probe | 120 |
    periodSeconds: 120
    ## @md | `sawtooth.livenessProbe.active` | if false, the liveness probe will run and evaluate the the situation, but always return successfully | string | "false"
    active: "false"
    ## @md | `sawtooth.livenessProbe.exitSignals` | when restarting due to a livenessProbe failure, the validator pod has a "signal" system which will cause it to restart the named containers in this var | "block-info-tp" |
    exitSignals: "block-info-tp pbft-engine"
  heartbeat:
    ## @md | `sawtooth.heartbeat.interval` | interval in seconds to issue a heartbeat | 300 |
    interval: 300

  ## @md | `sawtooth.permissioned` | Whether to run this chain as a permissioned chain or not | false |
  permissioned: false
  # This MUST be chosen by the user
  # Follows DNS naming rules
  ## @md | `sawtooth.namespace` | namespace to render these templates into (deprecated) | "prod" |
  namespace: prod
  # This MUST be chosen by the user.
  # Follows DNS naming rules
  ## @md | `sawtooth.networkName` | name of this sawtooth network (deprecated) | "mynetwork" |
  networkName: mynetwork
  # serial or parallel
  ## @md | `sawtooth.scheduler` | name of the sawtooth transaction scheduler to use | string | "serial"
  scheduler: serial
  # 100 - DevMode, 200 - PoET,300 - Raft, 400 - pbft
  # Engines can be enabled, but they aren't active unless they are selected
  # as the consensus algorithm.
  ## @md | `sawtooth.consensus` | id of the the consensus algorithm to use< valid values: 100:DevMode, 200, PoET, 300 - Raft, 400, PBFT | int | 200
  consensus: 200
  genesis:
    ## @md | `sawtooth.genesis.enabled` | If true, and the cluster is starting for the first time, then   a node will be selected to create and submit the genesis block | true |
    enabled: true
    ## @md | `sawtooth.genesis.seed` | The seed is an arbitrary string which identifies a given genesis  If the data of a given set of nodes is to be wiped out, change this value. | "9a2de774-90b5-11e9-9df0-87e889b0f1c9" |
    seed: "9a2de774-90b5-11e9-9df0-87e889b0f1c9"
  ## @md | `sawtooth.dynamicPeering` | Dynamic Peering should default to false, since it is a bit unreliable  | false |
  dynamicPeering: false
  ## @md | `sawtooth.externalSeeds` | a list of maps defining validator endpoints external to this deployment | [] |
  externalSeeds: []
  seth:
    # This should default to false, there appear to be problems with the required
    # block_info block injector that this depends upon
    ## @md | `sawtooth.seth.enabled` | enabled sawtooth-seth | false |
    enabled: false
  xo:
    # default this to false since you probably don't want it in real life
    ## @md | `sawtooth.xo.enabled` | enabled sawtooth-xo-tp | false |
    enabled: false
  smallbank:
    # default this to false since you probably don't want it in real life
    ## @md | `sawtooth.smallbank.enabled` | enabled sawtooth-smallbank-tp | false |
    enabled: false
  volumes:
    # This MUST be set, and SHOULD be presented to the user as an option, as it is a likely area
    # of customization
    ## @md | `sawtooth.hostPathBaseDir` | all sawtooth hostPath directories will be based here | string | /var/lib/btp
    hostPathBaseDir: /var/lib/btp/
  # This is an arbitrary cool down period to wait for validators to initialize
  # before starting any client operations
  ## @md | `sawtooth.client_wait` | arbitrary delay to validator client startup, such as the rest-api | 90 |
  client_wait: 90
  ## @md | `sawtooth.customTPs` | a list of [custom tp definitions](#custom-tp-definitions) | nil |
  customTPs:
  # A list of basic container definitions
  #    - name: intkey-tp
  #      image: "blockchaintp/sawtooth-intkey-tp-go:1.0.5"
  #      command: [ "bash", "-c" ]
  #      args: [ "intkey-tp-go -v --connect tcp://localhost:4004" ]
  ## @md | `sawtooth.affinity` | custom affinity rules for the sawtooth validator deamonset | nil |
  affinity: {}

serviceAccount:
  create: true
  name:
# The below are mostly controlled by BTP, although an "advanced" option to customize them may be
# presented
## @md | `images` | a map containing all of the image urls used by this template| N/A |
images:
  ## @md
  ## @md ## Images
  ## @md
  ## @md | field | default |
  ## @md |- |- |
  ## @md | `images.devmode_engine` | blockchaintp/sawtooth-devmode-engine-rust:BTP2.1.0
  devmode_engine:
  ## @md | `images.pbft_engine` | blockchaintp/sawtooth-pbft-engine:BTP2.1.0
  pbft_engine:
  ## @md | `images.poet_cli` | blockchaintp/sawtooth-poet-cli:BTP2.1.0
  poet_cli:
  ## @md | `images.poet_engine` | blockchaintp/sawtooth-poet-engine:BTP2.1.0
  poet_engine:
  ## @md | `images.poet_validator_registry_tp` | blockchaintp/sawtooth-poet-validator-registry-tp:BTP2.1.0
  poet_validator_registry_tp:
  ## @md | `images.raft_engine` | blockchaintp/sawtooth-raft-engine:BTP2.1.0
  raft_engine:
  ## @md | `images.block_info_tp` | blockchaintp/sawtooth-block-info-tp:BTP2.1.0
  block_info_tp:
  ## @md | `images.identity_tp` | blockchaintp/sawtooth-identity-tp:BTP2.1.0
  identity_tp:
  ## @md | `images.intkey_tp` | blockchaintp/sawtooth-intkey-tp-go:BTP2.1.0
  intkey_tp:
  ## @md | `images.settings_tp` | blockchaintp/sawtooth-settings-tp:BTP2.1.0
  settings_tp:
  ## @md | `images.shell` | blockchaintp/sawtooth-shell:BTP2.1.0
  shell:
  ## @md | `images.smallbank_tp` | blockchaintp/sawtooth-smallbank-tp-go:BTP2.1.0
  smallbank_tp:
  ## @md | `images.validator` | blockchaintp/sawtooth-validator:BTP2.1.0
  validator:
  ## @md | `images.xo_tp` | blockchaintp/sawtooth-xo-tp-go:BTP2.1.0
  xo_tp:
  ## @md | `images.rest_api` | blockchaintp/sawtooth-rest-api:BTP2.1.0
  rest_api:
  ## @md | `images.seth_rpc` | blockchaintp/sawtooth-seth-rpc:BTP2.1.0
  seth_rpc:
  ## @md | `images.seth_tp` | blockchaintp/sawtooth-seth-tp:BTP2.1.0
  seth_tp:
  ## @md | `images.xo_demo` | blockchaintp/xo-demo:BTP2.1.0
  xo_demo:

## @md
## @md ## Custom TP Definitions
## @md
## @md Custom TP definitions are describe using maps with the following fields
## @md
## @md | field | description | default |
## @md |-|-|-|
## @md | `name` | name of the custom tp container(must be unique within the pod) | nil |
## @md | `image` | url of the image for this tp | nil |
## @md | `command` | list of command tokens for this tp | list | nil
## @md | `arg` | list of arguments to the command | nil] |

## @md | `extraVolumes` | a list of additional volumes to add to all StatefulSets, Deployments, and DaemonSets | `[]` |
extraVolumes: []
## @md | `extraVolumeMounts` | a list of additional volume mounts to add to all StatefulSet, Deployment, and DaemonSet containers | `[]` |
extraVolumeMounts: []
