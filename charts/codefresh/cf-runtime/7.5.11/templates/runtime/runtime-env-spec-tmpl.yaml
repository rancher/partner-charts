{{- define "runtime.runtime-environment-spec.template" }}
{{- $cfCommonTplSemver := printf "cf-common-%s" (index .Subcharts "cf-common").Chart.Version -}}
{{- $kubeconfigFilePath := (include "runtime.runtime-environment-spec.runtime-name" .) -}}
{{- $name := (include "runtime.runtime-environment-spec.runtime-name" .) -}}
{{- $engineContext := .Values.runtime.engine -}}
{{- $dindContext := .Values.runtime.dind -}}
{{- $imageRegistry := .Values.global.imageRegistry -}}
metadata:
  name: {{ include "runtime.runtime-environment-spec.runtime-name" . }}
  agent: {{ .Values.runtime.agent }}
runtimeScheduler:
  type: KubernetesPod
  {{- if $engineContext.image }}
  image: {{ include (printf "%s.image.name" $cfCommonTplSemver ) (dict "image" $engineContext.image "context" .) | squote }}
  {{- end }}
  imagePullPolicy: {{ $engineContext.image.pullPolicy }}
  {{- with $engineContext.command }}
  command: {{- toYaml . | nindent 4 }}
  {{- end }}
  envVars:
  {{- with $engineContext.env }}
    {{- range $key, $val := . }}
    {{ $key }}: {{ $val | squote }}
    {{- end }}
  {{- end }}
    COMPOSE_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.COMPOSE_IMAGE) | squote }}
    CONTAINER_LOGGER_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.CONTAINER_LOGGER_IMAGE) | squote }}
    DEFAULT_QEMU_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.DEFAULT_QEMU_IMAGE) | squote }}
    DOCKER_BUILDER_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.DOCKER_BUILDER_IMAGE) | squote }}
    DOCKER_PULLER_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.DOCKER_PULLER_IMAGE) | squote }}
    DOCKER_PUSHER_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.DOCKER_PUSHER_IMAGE) | squote }}
    DOCKER_TAG_PUSHER_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.DOCKER_TAG_PUSHER_IMAGE) | squote }}
    FS_OPS_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.FS_OPS_IMAGE) | squote }}
    GIT_CLONE_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.GIT_CLONE_IMAGE) | squote }}
    KUBE_DEPLOY: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.KUBE_DEPLOY) | squote }}
    PIPELINE_DEBUGGER_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.PIPELINE_DEBUGGER_IMAGE) | squote }}
    TEMPLATE_ENGINE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.TEMPLATE_ENGINE) | squote }}
    CR_6177_FIXER: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.CR_6177_FIXER) | squote }}
    GC_BUILDER_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.GC_BUILDER_IMAGE) | squote }}
    COSIGN_IMAGE_SIGNER_IMAGE: {{ include "runtime.runtimeImageName" (dict "registry" $imageRegistry "imageFullName" $engineContext.runtimeImages.COSIGN_IMAGE_SIGNER_IMAGE) | squote }}
    RUNTIME_CHART_VERSION: {{ .Chart.Version }}
  {{- with $engineContext.userEnvVars }}
  userEnvVars:  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $engineContext.workflowLimits }}
  workflowLimits: {{- toYaml . | nindent 4 }}
  {{- end }}
  cluster:
    namespace: {{ .Release.Namespace }}
    serviceAccount: {{ $engineContext.serviceAccount }}
    {{- if .Values.runtime.agent }}
    clusterProvider:
      accountId: {{ .Values.global.accountId }}
      selector: {{ include "runtime.runtime-environment-spec.context-name" . }}
    {{- else }}
      {{- if .Values.runtime.inCluster }}
    inCluster: true
    kubeconfigFilePath: null
      {{- else }}
    name: {{ $name }}
    kubeconfigFilePath: {{ printf "/etc/kubeconfig/%s" $kubeconfigFilePath }}
      {{- end }}
    {{- end }}
    {{- with $engineContext.nodeSelector }}
    nodeSelector: {{- toYaml . | nindent 6 }}
    {{- end }}
  {{- with $engineContext.affinity }}
  affinity:  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $engineContext.tolerations }}
  tolerations:  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $engineContext.podAnnotations }}
  annotations:
    {{- range $key, $val := . }}
    {{ $key }}: {{ $val | squote }}
    {{- end }}
  {{- end }}
  {{- with $engineContext.podLabels }}
  labels: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if $engineContext.schedulerName }}
  schedulerName: {{ $engineContext.schedulerName }}
  {{- end }}
  resources:
  {{- if $engineContext.resources}}
  {{- toYaml $engineContext.resources | nindent 4 }}
  {{- end }}
  {{- with $engineContext.terminationGracePeriodSeconds }}
  terminationGracePeriodSeconds: {{ . }}
  {{- end }}
dockerDaemonScheduler:
  type: DindKubernetesPod
  {{- if $dindContext.image }}
  dindImage: {{ include (printf "%s.image.name" $cfCommonTplSemver ) (dict "image" $dindContext.image "context" .) | squote }}
  {{- end }}
  imagePullPolicy: {{ $dindContext.image.pullPolicy }}
  {{- with $dindContext.userAccess }}
  userAccess: {{ . }}
  {{- end }}
  {{- with $dindContext.env }}
  envVars:
    {{- range $key, $val := . }}
    {{ $key }}: {{ $val | squote }}
    {{- end }}
  {{- end }}
  cluster:
    namespace: {{ .Release.Namespace }}
    serviceAccount: {{ $dindContext.serviceAccount }}
    {{- if .Values.runtime.agent }}
    clusterProvider:
      accountId: {{ .Values.global.accountId }}
      selector: {{ include "runtime.runtime-environment-spec.context-name" . }}
    {{- else }}
      {{- if .Values.runtime.inCluster }}
    inCluster: true
    kubeconfigFilePath: null
      {{- else }}
    name: {{ $name }}
    kubeconfigFilePath: {{ printf "/etc/kubeconfig/%s" $kubeconfigFilePath }}
      {{- end }}
    {{- end }}
    {{- with $dindContext.nodeSelector }}
    nodeSelector: {{- toYaml . | nindent 6 }}
    {{- end }}
  {{- with $dindContext.affinity }}
  affinity:  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $dindContext.tolerations }}
  tolerations: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $dindContext.podAnnotations }}
  annotations:
    {{- range $key, $val := . }}
    {{ $key }}: {{ $val | squote }}
    {{- end }}
  {{- end }}
  {{- with $dindContext.podLabels }}
  labels: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if $dindContext.schedulerName }}
  schedulerName: {{ $dindContext.schedulerName }}
  {{- end }}
  {{- if $dindContext.pvcs }}
  pvcs:
  {{- range $index, $pvc := $dindContext.pvcs }}
    - name: {{ $pvc.name }}
      reuseVolumeSelector: {{ $pvc.reuseVolumeSelector | squote }}
      reuseVolumeSortOrder: {{ $pvc.reuseVolumeSortOrder }}
      storageClassName: {{ include (printf "%v.tplrender" $cfCommonTplSemver) (dict "Values" $pvc.storageClassName "context" $) }}
      volumeSize: {{ $pvc.volumeSize }}
      {{- with $pvc.annotations }}
      annotations: {{ . | toYaml | nindent 8 }}
      {{- end }}
  {{- end }}
  {{- end }}
  defaultDindResources:
  {{- with $dindContext.resources }}
  {{- if not .requests }}
    limits: {{- toYaml .limits | nindent 6 }}
    requests: null
  {{- else }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- end }}
  {{- with $dindContext.terminationGracePeriodSeconds }}
  terminationGracePeriodSeconds: {{ . }}
  {{- end }}
  {{- with $dindContext.userVolumeMounts }}
  userVolumeMounts: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $dindContext.userVolumes }}
  userVolumes: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if and (not .Values.runtime.agent)  }}
  clientCertPath: /etc/ssl/cf/
  volumeMounts:
    codefresh-certs-server:
      name: codefresh-certs-server
      mountPath: /etc/ssl/cf
      readOnly: false
  volumes:
    codefresh-certs-server:
      name: codefresh-certs-server
      secret:
        secretName: codefresh-certs-server
  {{- end }}
  {{- with $dindContext.podSecurityContext }}
  podSecurityContext: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $dindContext.containerSecurityContext }}
  containerSecurityContext: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if $dindContext.volumePermissions.enabled }}
  initContainers:
  - name: volume-permissions
    image: {{ include (printf "%s.image.name" $cfCommonTplSemver ) (dict "image" $dindContext.volumePermissions.image "context" .) }}
    imagePullPolicy: {{ $dindContext.volumePermissions.image.pullPolicy | default "Always" }}
    command:
      - /bin/sh
    args:
      - -ec
      - |
        chown -R {{ $dindContext.containerSecurityContext.runAsUser }}:{{ $dindContext.podSecurityContext.fsGroup }} /home/rootless/.local/share/docker
    volumeMounts:
    - mountPath: /home/rootless/.local/share/docker
      name: dind
    {{- if eq ( toString ( $dindContext.volumePermissions.securityContext.runAsUser )) "auto" }}
    securityContext: {{- omit $dindContext.volumePermissions.securityContext "runAsUser" | toYaml | nindent 6 }}
    {{- else }}
    securityContext: {{- $dindContext.volumePermissions.securityContext | toYaml | nindent 6 }}
    {{- end }}
    resources:
      {{- toYaml $dindContext.volumePermissions.resources | nindent 6 }}
  {{- end }}
extends: {{- toYaml .Values.runtime.runtimeExtends | nindent 2 }}
  {{- if .Values.runtime.description }}
description: {{ .Values.runtime.description }}
  {{- else }}
description: null
  {{- end }}
{{- if .Values.global.accountId }}
accountId: {{ .Values.global.accountId }}
{{- end }}
{{- if not .Values.runtime.agent }}
accounts: {{- toYaml .Values.runtime.accounts | nindent 2 }}
{{- end }}
{{- if .Values.appProxy.enabled }}
appProxy:
  externalIP: >-
    {{ printf "https://%s%s" .Values.appProxy.ingress.host (.Values.appProxy.ingress.pathPrefix | default "/") }}
{{- end }}
{{- if not .Values.runtime.agent }}
systemHybrid: true
{{- end }}
{{- end }}
