{{/*
Return certificate and CA for Webhooks.
It handles variants when a cert has to be generated by Helm,
a cert is loaded from an existing secret or is provided via `.Values`
*/}}
{{- define "k8s-agents-operator.webhookCert" -}}
{{- $caCert := "" }}
{{- $clientCert := "" }}
{{- $clientKey := "" }}
{{- if .Values.admissionWebhooks.autoGenerateCert.enabled }}
    {{- $prevSecret := (lookup "v1" "Secret" .Release.Namespace (include "k8s-agents-operator.certificateSecret.name" . )) }}
    {{- if and (not .Values.admissionWebhooks.autoGenerateCert.recreate) $prevSecret }}
        {{- $clientCert = index $prevSecret "data" "tls.crt" }}
        {{- $clientKey = index $prevSecret "data" "tls.key" }}
        {{- $caCert = index $prevSecret "data" "ca.crt" }}
        {{- if not $caCert }}
            {{- $prevHook := (lookup "admissionregistration.k8s.io/v1" "MutatingWebhookConfiguration" .Release.Namespace (print (include "newrelic.common.naming.fullname" . ) "-mutation")) }}
            {{- if not (eq (toString $prevHook) "<nil>") }}
                {{- $caCert = (first $prevHook.webhooks).clientConfig.caBundle }}
            {{- end }}
        {{- end }}
    {{- else }}
        {{- $certValidity := int .Values.admissionWebhooks.autoGenerateCert.certPeriodDays | default 365 }}
        {{- $ca := genCA "k8s-agents-operator-operator-ca" $certValidity }}
        {{- $domain1 := printf "%s.%s.svc" (include "k8s-agents-operator.webhook.service.name" .) $.Release.Namespace }}
        {{- $domain2 := printf "%s.%s.svc.%s" (include "k8s-agents-operator.webhook.service.name" .) $.Release.Namespace $.Values.kubernetesClusterDomain }}
        {{- $domains := list $domain1 $domain2 }}
        {{- $cert := genSignedCert (include "newrelic.common.naming.fullname" .) nil $domains $certValidity $ca }}
        {{- $clientCert = b64enc $cert.Cert }}
        {{- $clientKey = b64enc $cert.Key }}
        {{- $caCert = b64enc $ca.Cert }}
    {{- end }}
{{- else }}
    {{- $clientCert = .Files.Get .Values.admissionWebhooks.certFile | b64enc }}
    {{- $clientKey = .Files.Get .Values.admissionWebhooks.keyFile | b64enc }}
    {{- $caCert = .Files.Get .Values.admissionWebhooks.caFile | b64enc }}
{{- end }}
{{- $result := dict "clientCert" $clientCert "clientKey" $clientKey "caCert" $caCert }}
{{- $result | toYaml }}
{{- end }}
