{{- if .Values.enabled }}
{{- $imageCfg := dict "global" .Values.global.image "local" .Values.image -}}
{{- $initImageCfg := dict "global" .Values.global.busybox.image "local" .Values.init.image -}}
{{- include "database.datamodel.prepare" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "gitlab.standardLabels" . | nindent 4 }}
    {{- include "gitlab.commonLabels" . | nindent 4 }}
  annotations:
    {{- include "gitlab.deploymentAnnotations" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "gitlab.selectorLabels" . | nindent 6 }}
  {{- if .Values.deployment.strategy }}
  strategy: {{ .Values.deployment.strategy | toYaml | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
        {{- include "gitlab.standardLabels" . | nindent 8 }}
        {{- include "gitlab.commonLabels" . | nindent 8 }}
        {{- include "gitlab.podLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- if and .Values.metrics.enabled (not .Values.metrics.serviceMonitor.enabled) }}
      {{- if .Values.metrics.annotations }}
        {{- toYaml .Values.metrics.annotations | nindent 8 }}
      {{- else }}
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: {{ .Values.metrics.port | quote }}
        gitlab.com/prometheus_path: {{ .Values.metrics.path }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.metrics.port | quote }}
        prometheus.io/path: {{ .Values.metrics.path }}
      {{- end }}
      {{- end }}
      {{- range $key, $value := .Values.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}

    spec:
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- if eq (default .Values.global.antiAffinity .antiAffinity) "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: {{ default .Values.global.affinity.podAntiAffinity.topologyKey .Values.affinity.podAntiAffinity.topologyKey | quote }}
              labelSelector:
                matchLabels:
                  {{- include "gitlab.selectorLabels" . | nindent 18 }}
      {{- else if eq (default .Values.global.antiAffinity .antiAffinity) "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: {{ default .Values.global.affinity.podAntiAffinity.topologyKey .Values.affinity.podAntiAffinity.topologyKey | quote }}
              labelSelector:
                matchLabels:
                  {{- include "gitlab.selectorLabels" . | nindent 18 }}
      {{- end }}
      {{- if or .Values.serviceAccount.enabled .Values.global.serviceAccount.enabled }}
      serviceAccountName: {{ include "gitlab.serviceAccount.name" . }}
      {{- end }}
      automountServiceAccountToken: false
      {{- include "gitlab.priorityClassName" . | nindent 6 }}
      initContainers:
        {{- include "gitlab.extraInitContainers" . | nindent 8 }}
        {{- include "gitlab.certificates.initContainer" . | nindent 8 }}
        - name: configure
          command: ['sh', '/config/configure']
          image: {{ include "gitlab.busybox.image" (dict "local" .Values.init "global" $.Values.global.busybox) | quote }}
          {{- include "gitlab.image.pullPolicy" $initImageCfg | indent 10 }}
          env:
          {{- include "gitlab.extraEnv" . | nindent 10 }}
          {{- include "gitlab.extraEnvFrom" (dict "root" $ "local" (dict)) | nindent 10 }}
          volumeMounts:
          {{- include "gitlab.extraVolumeMounts" . | nindent 10 }}
          {{- include "gitlab.psql.ssl.volumeMount" . | nindent 10 }}
          - name: gitlab-exporter-config
            mountPath: /config
            readOnly: true
          - name: init-gitlab-exporter-secrets
            mountPath: /init-config
            readOnly: true
          - name: gitlab-exporter-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            {{- toYaml .Values.init.resources | nindent 12 }}
      {{- include "gitlab.image.pullSecrets" $imageCfg | indent 6 }}
      containers:
        {{- include "gitlab.extraContainers" . | nindent 8 }}
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ coalesce .Values.image.tag .Chart.AppVersion }}"
          {{- include "gitlab.image.pullPolicy" $imageCfg | indent 10 }}
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab-exporter/templates'
            - name: CONFIG_DIRECTORY
              value: '/etc/gitlab-exporter'
            {{- include "gitlab.extraEnv" . | nindent 12 }}
            {{- include "gitlab.extraEnvFrom" (dict "root" $ "local" (dict)) | nindent 12 }}
          ports:
          - containerPort: {{ .Values.service.internalPort }}
            name: http-metrics
          volumeMounts:
            - name: gitlab-exporter-config
              mountPath: /var/opt/gitlab-exporter/templates/gitlab-exporter.yml.erb
              subPath: gitlab-exporter.yml.erb
            - name: gitlab-exporter-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            {{- include "gitlab.extraVolumeMounts" . | nindent 12 }}
            {{- include "gitlab.certificates.volumeMount" . | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          readinessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'gitlab-exporter'"]
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      {{- include "gitlab.extraVolumes" . | nindent 6 }}
      {{- include "gitlab.psql.ssl.volume" . | nindent 6 }}
      - name: gitlab-exporter-config
        configMap:
          name: {{ template "fullname" . }}
      - name: init-gitlab-exporter-secrets
        projected:
          defaultMode: 0400
          sources:
          {{- range $.Values.local.psql }}
          {{-   include "gitlab.psql.secret" . | nindent 10 }}
          {{- end }}
          {{- include "gitlab.redis.secret" . | nindent 10 }}
          {{ if .Values.tls.enabled }}
          - secret:
              name: {{ template "gitlab.gitlab-exporter.tls.secret" . }}
              items:
                - key: tls.crt
                  path: "gitlab-exporter/tls.crt"
                - key: tls.key
                  path: "gitlab-exporter/tls.key"
          {{- end }}

      - name: gitlab-exporter-secrets
        emptyDir:
          medium: "Memory"
      {{- include "gitlab.certificates.volumes" . | nindent 6 }}
      {{- include "gitlab.nodeSelector" . | nindent 6 }}
    {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
    {{- end }}
{{- end }}
