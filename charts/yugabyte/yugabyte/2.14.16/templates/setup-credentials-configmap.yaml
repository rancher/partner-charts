{{- if or .Values.authCredentials.ycql.user .Values.authCredentials.ycql.password .Values.authCredentials.ycql.keyspace .Values.authCredentials.ysql.password .Values.authCredentials.ysql.user .Values.authCredentials.ysql.database }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "yugabyte.fullname" . }}-setup-credentials-script
  namespace: "{{ .Release.Namespace }}"
  labels:
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}"
    component: "{{ .Values.Component }}"
data:
  setup-credentials.sh: |
    #!/bin/bash

    set -eo pipefail

    # Setup script to setup credentials

    # -----------------------------------------
    # Default Variables
    # -----------------------------------------

    readonly DEFAULT_YSQL_USER="yugabyte"
    readonly DEFAULT_YSQL_PASSWORD="yugabyte"
    readonly DEFAULT_YSQL_DB="yugabyte"

    readonly DEFAULT_YCQL_USER="cassandra"
    readonly DEFAULT_YCQL_PASSWORD="cassandra"

    {{- range .Values.Services }}
    {{- $service := . -}}
      {{- if eq ($service.name) "yb-tservers" }}
        readonly YSQL_PORT={{ index $service.ports "tcp-ysql-port" }}
        # TODO: Update the tcp-yql-port to tcp-ycql-port in values.yaml
        readonly YCQL_PORT={{ index $service.ports "tcp-yql-port" }}
      {{- end }}
    {{- end }}

    prefix_ysql_cmd=(
      /home/yugabyte/bin/ysqlsh -h yb-tservers.{{ .Release.Namespace }}.svc.{{ .Values.domainName }}
      -p "$YSQL_PORT"
    )

    prefix_ycql_cmd=(
      /home/yugabyte/bin/ycqlsh yb-tservers.{{ .Release.Namespace }}.svc.{{ .Values.domainName }}
      "$YCQL_PORT"
    )

    {{- if .Values.tls.enabled }}
      prefix_ysql_cmd+=("sslmode=require")
      prefix_ycql_cmd+=(--ssl)
    {{- end }}

    # -----------------------------------------
    # Variables
    # -----------------------------------------

    ysql_user=
    ysql_password=
    ysql_db=
    ycql_user=
    ycql_password=
    ycql_keyspace=

    # -----------------------------------------
    # Hepler functions
    # -----------------------------------------

    cleanup() {
      local exit_code=$?
      echo "Exiting with code $exit_code"
      exit "$exit_code"
    }

    function waitUntilHealthy() {
      declare -a ysql_cmd
      export PGPASSWORD="$2"
      ysql_cmd=(
        /home/yugabyte/bin/ysqlsh -h yb-tservers.{{ .Release.Namespace }}.svc.{{ .Values.domainName }}
        -p "$3"
        -U "$1"
        -c "\\conninfo"
      )

      if [[ "$4" == "true" ]]; then
        ysql_cmd+=("sslmode=require")
      fi

      echo "${ysql_cmd[@]}"
      while ! "${ysql_cmd[@]}"; do
        sleep 5s
      done
    }

    export -f waitUntilHealthy

    get_ysql_credentials() {
      [[ -n "$YSQL_USER" ]] && ysql_user="$YSQL_USER" || ysql_user="$DEFAULT_YSQL_USER"

      [[ -n "$YSQL_PASSWORD" ]] && ysql_password="$YSQL_PASSWORD"

      if [[ -z "$YSQL_PASSWORD" ]] && [[ "$ysql_user" != "$DEFAULT_YSQL_USER" ]]; then
        ysql_password="$YSQL_USER"
      fi

      [[ -n "$YSQL_DB" ]] && ysql_db="$YSQL_DB"

      [[ -z "$YSQL_DB" ]] && [[ -n "$YSQL_USER" ]] && ysql_db="$ysql_user"

      api="ysql"
    }

    get_ycql_credentials() {
      [[ -n "$YCQL_USER" ]] && ycql_user="$YCQL_USER" || ycql_user="$DEFAULT_YCQL_USER"

      [[ -n "$YCQL_PASSWORD" ]] && ycql_password="$YCQL_PASSWORD"

      if [[ -z "$YCQL_PASSWORD" ]] && [[ "$ycql_user" != "$DEFAULT_YCQL_USER" ]]; then
        ycql_password="$YCQL_USER"
      fi

      [[ -n "$YCQL_KEYSPACE" ]] && ycql_keyspace="$YCQL_KEYSPACE"

      [[ -z "$YCQL_KEYSPACE" ]] && [[ -n "$YCQL_USER" ]] && ycql_keyspace="$ycql_user"

      api="ycql"
    }

    create_user() {
      declare -a ysql_cmd
      declare -a ycql_cmd

      case "$api" in
      "ysql")
        export PGPASSWORD="$DEFAULT_YSQL_PASSWORD"
        read -r -a ysql_cmd <<< "${prefix_ysql_cmd[@]}"
        ysql_cmd+=(
          -U "$DEFAULT_YSQL_USER"
          -c "CREATE ROLE ${ysql_user} with LOGIN SUPERUSER password '${ysql_password}' ;"
          -c "ALTER DATABASE ${ysql_db} OWNER TO ${ysql_user} ;"
        )
        "${ysql_cmd[@]}"
      ;;
      "ycql")
        read -r -a ycql_cmd <<< "${prefix_ycql_cmd[@]}"
        ycql_cmd+=(
          -u "$DEFAULT_YCQL_USER"
          -p "$DEFAULT_YCQL_PASSWORD"
          -e "CREATE ROLE IF NOT EXISTS ${ycql_user} WITH PASSWORD = '${ycql_password}' AND LOGIN = true AND SUPERUSER = true ;"
        )
        "${ycql_cmd[@]}"
      ;;
      *) exit 1
      esac
    }

    update_password() {
      declare -a ysql_cmd
      declare -a ycql_cmd

      case "$api" in
      "ysql")
        export PGPASSWORD="$DEFAULT_YSQL_PASSWORD"
        read -r -a ysql_cmd <<< "${prefix_ysql_cmd[@]}"
        ysql_cmd+=(
          -U "$DEFAULT_YSQL_USER"
          -c "ALTER ROLE ${ysql_user} WITH PASSWORD '${ysql_password}' ;"
        )
        "${ysql_cmd[@]}"
      ;;
      "ycql")
        read -r -a ycql_cmd <<< "${prefix_ycql_cmd[@]}"
        ycql_cmd+=(
          -u "$DEFAULT_YCQL_USER"
          -p "$DEFAULT_YCQL_PASSWORD"
          -e "ALTER ROLE ${ycql_user} WITH PASSWORD = '${ycql_password}' ;"
        )
        "${ycql_cmd[@]}"
      ;;
      *) exit 1
      esac
    }

    create_container() {
      declare -a ysql_cmd
      declare -a ycql_cmd

      case "$api" in
        "ysql")
          export PGPASSWORD="$DEFAULT_YSQL_PASSWORD"
          read -r -a ysql_cmd <<< "${prefix_ysql_cmd[@]}"
          ysql_cmd+=(
            -U "$DEFAULT_YSQL_USER"
            -c "CREATE DATABASE ${ysql_db} ;"
          )
          "${ysql_cmd[@]}"
        ;;
        "ycql")
          read -r -a ycql_cmd <<< "${prefix_ycql_cmd[@]}"
          ycql_cmd+=(
            -u "$DEFAULT_YCQL_USER"
            -p "$DEFAULT_YCQL_PASSWORD"
            -e "CREATE KEYSPACE IF NOT EXISTS ${ycql_keyspace} ;"
          )
          "${ycql_cmd[@]}"
        ;;
        *) exit 1
      esac
    }

    # -----------------------------------------
    # Main
    # -----------------------------------------

    trap cleanup EXIT

    echo "Waiting for YugabyteDB to start."
    if ! timeout 3m bash -c "waitUntilHealthy ${DEFAULT_YSQL_USER} ${DEFAULT_YSQL_PASSWORD} ${YSQL_PORT} {{ .Values.tls.enabled }}"; then
      echo "Timeout while waiting for database"
      exit 1
    fi

    # YSQL Credentials
    get_ysql_credentials

    ## Create YSQL DB
    if [[ -n $ysql_db ]] && [[ "$ysql_db" != "$DEFAULT_YSQL_DB" ]]; then
      create_container
    fi

    ## Update YSQL Password
    if [[ -n $ysql_password ]] && [[ "$ysql_password" != "$DEFAULT_YSQL_PASSWORD" ]] && [[ "$ysql_user" == "$DEFAULT_YSQL_USER" ]]; then
      update_password
    fi

    ## Create YSQL User
    if [[ -n $ysql_user ]] && [[ "$ysql_user" != "$DEFAULT_YSQL_USER" ]]; then
      create_user
    fi

    # YCQL Credentials
    get_ycql_credentials

    ## Create YCQL Keyspace
    if [[ -n $ycql_keyspace ]] && [[ -n "$ycql_keyspace" ]]; then
      create_container
    fi

    ## Update YCQL Password
    if [[ -n $ycql_password ]] && [[ "$ycql_password" != "$DEFAULT_YCQL_PASSWORD" ]] && [[ "$ycql_user" == "$DEFAULT_YCQL_USER" ]]; then
      update_password
    fi

    ## Create YCQL User
    if [[ -n $ycql_user ]] && [[ "$ycql_user" != "$DEFAULT_YCQL_USER" ]]; then
      create_user
    fi

{{- end }}
