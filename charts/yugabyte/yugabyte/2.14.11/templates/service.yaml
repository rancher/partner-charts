{{- $root := . -}}
---
{{- if and (eq $root.Values.tls.enabled true) (eq $root.Values.tls.certManager.enabled false) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $root.Values.oldNamingStyle | ternary "yugabyte-tls-client-cert" (printf "%s-client-tls" (include "yugabyte.fullname" $root)) }}
  namespace: "{{ $root.Release.Namespace }}"
  labels:
    {{- include "yugabyte.labels" $root | indent 4 }}
type: Opaque
data:
{{- if $root.Values.tls.rootCA.key }}
{{- $rootCAClient := buildCustomCert $root.Values.tls.rootCA.cert $root.Values.tls.rootCA.key -}}
{{- $client := genSignedCert "yugabyte" ( default nil ) ( default nil ) 3650 $rootCAClient }}
  root.crt: {{ $rootCAClient.Cert | b64enc }}
  yugabytedb.crt: {{ $client.Cert | b64enc }}
  yugabytedb.key: {{ $client.Key | b64enc }}
{{- else }}
  root.crt: {{ $root.Values.tls.rootCA.cert }}
  yugabytedb.crt: {{ $root.Values.tls.clientCert.cert }}
  yugabytedb.key: {{ $root.Values.tls.clientCert.key }}
{{- end }}
---
{{- end }}

{{- range .Values.Services }}
{{- $service := . -}}
{{- $appLabelArgs := dict "label" .label "root" $root -}}
{{- $serviceValues := (dict "Service" $service "Values" $root.Values "Chart" $root.Chart "Release" $root.Release) -}}

{{- if and (eq $root.Values.tls.enabled true) (eq $root.Values.tls.certManager.enabled false) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $root.Values.oldNamingStyle | ternary (printf "%s-yugabyte-tls-cert" $service.label) (printf "%s-%s-tls-cert" (include "yugabyte.fullname" $root) $service.label) }}
  namespace: "{{ $root.Release.Namespace }}"
  labels:
    {{- include "yugabyte.applabel" ($appLabelArgs) | indent 4 }}
    {{- include "yugabyte.labels" $root | indent 4 }}
type: Opaque
data:
{{- $replicas := (eq .name "yb-masters") | ternary $root.Values.replicas.master $root.Values.replicas.tserver -}}
{{- range $index := until ( int ( $replicas ) ) }}
{{- $nodeOldStyle := printf "%s-%d.%s.%s.svc.%s" $service.label $index $service.name $root.Release.Namespace $root.Values.domainName }}
{{- $nodeNewStyle := printf "%s-%s-%d.%s-%s.%s.svc.%s" (include "yugabyte.fullname" $root) $service.label $index (include "yugabyte.fullname" $root) $service.name $root.Release.Namespace $root.Values.domainName }}
{{- $node := $root.Values.oldNamingStyle | ternary $nodeOldStyle $nodeNewStyle }}
{{- if $root.Values.tls.rootCA.key }}
{{- $dns1 := printf "*.*.%s" $root.Release.Namespace }}
{{- $dns2 := printf "%s.svc.%s" $dns1 $root.Values.domainName }}
{{- $rootCA := buildCustomCert $root.Values.tls.rootCA.cert $root.Values.tls.rootCA.key -}}
{{- $server := genSignedCert $node ( default nil ) (list $dns1 $dns2 ) 3650 $rootCA }}
  node.{{$node}}.crt: {{ $server.Cert | b64enc }}
  node.{{$node}}.key: {{ $server.Key | b64enc }}
{{- else }}
  node.{{$node}}.crt: {{ $root.Values.tls.nodeCert.cert }}
  node.{{$node}}.key: {{ $root.Values.tls.nodeCert.key }}
{{- end }}
{{- end }}
  ca.crt: {{ $root.Values.tls.rootCA.cert }}
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $root.Values.oldNamingStyle | ternary .name (printf "%s-%s" (include "yugabyte.fullname" $root) .name) | quote }}
  labels:
    {{- include "yugabyte.applabel" ($appLabelArgs) | indent 4 }}
    {{- include "yugabyte.labels" $root | indent 4 }}
    service-type: "headless"
spec:
  clusterIP: None
  ports:
    {{- range $label, $port := .ports }}
    - name: {{ $label | quote }}
      port: {{ $port }}
    {{- end}}
  selector:
    {{- include "yugabyte.appselector" ($appLabelArgs) | indent 4 }}

{{ if $root.Values.enableLoadBalancer }}
{{- range $endpoint :=  $root.Values.serviceEndpoints }}
{{- if eq $service.label $endpoint.app }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $root.Values.oldNamingStyle | ternary $endpoint.name (printf "%s-%s" (include "yugabyte.fullname" $root) $endpoint.name) | quote }}
  annotations:
{{ toYaml $endpoint.annotations | indent 4 }}
  labels:
    {{- include "yugabyte.applabel" ($appLabelArgs) | indent 4 }}
    {{- include "yugabyte.labels" $root | indent 4 }}
spec:
  {{ if eq $root.Release.Service "Tiller" }}
  clusterIP:
  {{ else }}
  {{ if $endpoint.clusterIP }}
  clusterIP: {{ $endpoint.clusterIP }}
  {{- end }}
  {{- end }}
  ports:
    {{- range $label, $port := $endpoint.ports }}
    - name: {{ $label | quote }}
      port: {{ $port }}
    {{- end}}
  selector:
    {{- include "yugabyte.appselector" ($appLabelArgs) | indent 4 }}
  type: {{ $endpoint.type }}
  externalTrafficPolicy: {{ $endpoint.externalTrafficPolicy | default "Cluster" }}
  {{- if $endpoint.loadBalancerIP }}
  loadBalancerIP: {{ $endpoint.loadBalancerIP }}
  {{- end }}
{{- end}}
{{- end}}
{{ end }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $root.Values.oldNamingStyle | ternary .label (printf "%s-%s" (include "yugabyte.fullname" $root) .label) | quote }}
  namespace: "{{ $root.Release.Namespace }}"
  labels:
    {{- include "yugabyte.applabel" ($appLabelArgs) | indent 4 }}
    {{- include "yugabyte.labels" $root | indent 4 }}
  {{- if $root.Values.statefulSetAnnotations }}
  annotations:
{{ toYaml $root.Values.statefulSetAnnotations | indent 4 }}
  {{- end }}
spec:
  serviceName: {{ $root.Values.oldNamingStyle | ternary .name (printf "%s-%s" (include "yugabyte.fullname" $root) .name) | quote }}
  podManagementPolicy: {{ $root.Values.PodManagementPolicy }}
  {{ if eq .name "yb-masters" }}
  replicas: {{ $root.Values.replicas.master }}
  {{ else }}
  replicas: {{ $root.Values.replicas.tserver  }}
  {{ end }}
  {{- $storageInfo := (eq .name "yb-masters") | ternary $root.Values.storage.master $root.Values.storage.tserver -}}
  {{ if not $root.Values.storage.ephemeral }}
  volumeClaimTemplates:
    {{- range $index := until (int ($storageInfo.count )) }}
    - metadata:
        name: {{ $root.Values.oldNamingStyle | ternary (printf "datadir%d" $index) (printf "%s%d" (include "yugabyte.volume_name" $root) $index) }}
        {{- if $root.Values.legacyVolumeClaimAnnotations }}
        annotations:
          volume.beta.kubernetes.io/storage-class: {{ $storageInfo.storageClass | quote }}
        {{- end }}
        labels:
          {{- include "yugabyte.labels" $root | indent 10 }}
      spec:
        accessModes:
          - "ReadWriteOnce"
        {{- if $storageInfo.storageClass }}
        storageClassName: {{ $storageInfo.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ $storageInfo.size }}
    {{- end }}
  {{- end }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      {{ if eq .name "yb-masters" }}
      partition: {{ $root.Values.partition.master }}
      {{ else }}
      partition: {{ $root.Values.partition.tserver }}
      {{ end }}
  selector:
    matchLabels:
      {{- include "yugabyte.appselector" ($appLabelArgs) | indent 6 }}
  template:
    metadata:
      {{- if eq .name "yb-masters" }}
      {{- if (or $root.Values.networkAnnotation $root.Values.master.podAnnotations $root.Values.tls.enabled) }}
      annotations:
      {{- with $root.Values.networkAnnotation }}{{ toYaml . | nindent 8 }}{{ end }}
      {{- with $root.Values.master.podAnnotations }}{{ toYaml . | nindent 8 }}{{ end }}
      {{- if $root.Values.tls.enabled }}
        checksum/rootCA: {{ cat $root.Values.tls.rootCA.cert $root.Values.tls.rootCA.key | sha256sum }}
      {{- end }}
      {{- end }}
      {{- else }}
      {{- if (or $root.Values.networkAnnotation $root.Values.tserver.podAnnotations $root.Values.tls.enabled) }}
      annotations:
      {{- with $root.Values.networkAnnotation }}{{ toYaml . | nindent 8 }}{{ end }}
      {{- with $root.Values.tserver.podAnnotations }}{{ toYaml . | nindent 8 }}{{ end }}
      {{- if $root.Values.tls.enabled }}
        checksum/rootCA: {{ cat $root.Values.tls.rootCA.cert $root.Values.tls.rootCA.key | sha256sum }}
      {{- end }}
      {{- end }}
      {{- end }}
      labels:
        {{- include "yugabyte.applabel" ($appLabelArgs) | indent 8 }}
        {{- include "yugabyte.labels" $root | indent 8 }}
        {{- if eq .name "yb-masters" }}
        {{- with $root.Values.master.podLabels }}{{ toYaml . | nindent 8 }}{{ end }}
        {{- else }}
        {{- with $root.Values.tserver.podLabels }}{{ toYaml . | nindent 8 }}{{ end }}
        {{- end }}
    spec:
      {{- if $root.Values.Image.pullSecretName }}
      imagePullSecrets:
      - name: {{ $root.Values.Image.pullSecretName }}
      {{ end }}
      {{- if $root.Values.podSecurityContext.enabled }}
      securityContext: {{- omit $root.Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if $root.Values.nodeSelector }}
      nodeSelector:
      {{ toYaml $root.Values.nodeSelector | indent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 300
      {{- if eq .name "yb-masters" }} # yb-masters
      {{- if $root.Values.master.tolerations }}
      tolerations:
      {{- with $root.Values.master.tolerations }}{{ toYaml . | nindent 8 }}{{ end }}
      {{- end }}
      {{- else }} # yb-tservers
      {{- if $root.Values.tserver.tolerations }}
      tolerations:
      {{- with $root.Values.tserver.tolerations }}{{ toYaml . | nindent 8 }}{{ end }}
      {{- end }}
      {{- end }}
      affinity:
        # Set the anti-affinity selector scope to YB masters.
        {{ if $root.Values.AZ }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: failure-domain.beta.kubernetes.io/zone
                operator: In
                values:
                - {{ $root.Values.AZ }}
            - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                - {{ $root.Values.AZ }}
        {{ end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                {{- if $root.Values.oldNamingStyle }}
                - key: app
                  operator: In
                  values:
                  - "{{ .label }}"
                {{- else }}
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - "{{ .label }}"
                - key: release
                  operator: In
                  values:
                  - {{ $root.Release.Name | quote }}
                {{- end }}
              topologyKey: kubernetes.io/hostname
        {{- if eq .name "yb-masters" }}
        {{- with $root.Values.master.affinity }}{{ toYaml . | nindent 8 }}{{ end }}
        {{- else }}
        {{- with $root.Values.tserver.affinity }}{{ toYaml . | nindent 8 }}{{ end }}
        {{- end }}
      containers:
      - name: "{{ .label }}"
        image: "{{ $root.Values.Image.repository }}:{{ $root.Values.Image.tag }}"
        imagePullPolicy: {{ $root.Values.Image.pullPolicy }}
        lifecycle:
          postStart:
            exec:
              command:
                - "bash"
                - "-c"
                - >
                  mkdir -p /mnt/disk0/cores;
                  mkdir -p /mnt/disk0/yb-data/scripts;
                  if [ ! -f /mnt/disk0/yb-data/scripts/log_cleanup.sh ]; then
                    if [ -f /home/yugabyte/bin/log_cleanup.sh ]; then
                      cp /home/yugabyte/bin/log_cleanup.sh /mnt/disk0/yb-data/scripts;
                    fi;
                  fi
        {{- if (and (not $root.Values.storage.ephemeral) (not $service.skipHealthChecks)) }}
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - touch {{ template "yugabyte.fs_data_dirs_probe_files" $storageInfo }}
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        {{- end }}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: YBDEVOPS_CORECOPY_DIR
          value: "/mnt/disk0/cores"
        {{- if eq .name "yb-masters" }}
        {{- with $root.Values.master.extraEnv }}{{ toYaml . | nindent 8 }}{{ end }}
        {{- with $root.Values.master.secretEnv }}{{ toYaml . | nindent 8 }}{{ end }}
        {{- else }}
        {{- with $root.Values.tserver.extraEnv }}{{ toYaml . | nindent 8 }}{{ end }}
        {{- with $root.Values.tserver.secretEnv }}{{ toYaml . | nindent 8 }}{{ end }}
        {{- end }}
        {{- if and $root.Values.tls.enabled $root.Values.tls.clientToServer (ne .name "yb-masters") }}
        - name: SSL_CERTFILE
          value: /root/.yugabytedb/root.crt
        {{- end }}
        resources:
        {{ if eq .name "yb-masters" }}
{{ toYaml $root.Values.resource.master | indent 10 }}
        {{ else }}
{{ toYaml $root.Values.resource.tserver | indent 10 }}
        {{ end }}
        # core dumps are collected to workingDir if
        # kernel.core_pattern is set to a relative path like
        # core.%e.%p.%t ref:
        # https://github.com/yugabyte/charts/issues/11
        workingDir: "/mnt/disk0/cores"
        command:
          - "/sbin/tini"
          - "--"
        args:
          - "/bin/bash"
          - "-c"
          - |
          {{- if and (not $root.Values.preflight.skipUlimit) (not $root.Values.preflight.skipAll) }}
            if [ -f /home/yugabyte/tools/k8s_preflight.py ]; then
              /home/yugabyte/tools/k8s_preflight.py all
            fi && \
          {{- end }}
          {{- if (and (not $root.Values.storage.ephemeral) (not $root.Values.preflight.skipAll)) }}
            touch {{ template "yugabyte.fs_data_dirs_probe_files" $storageInfo }} && \
          {{- end }}
          {{- $rpcAddr := include "yugabyte.rpc_bind_address" $serviceValues -}}
          {{- $rpcPort := index $service.ports "tcp-rpc-port" -}}
          {{- $rpcDict := dict "Addr" $rpcAddr "Port" $rpcPort -}}
          {{- $rpcPreflight := include "yugabyte.preflight_check" (set $serviceValues "Preflight" $rpcDict) -}}
          {{- if $rpcPreflight -}}{{ $rpcPreflight | nindent 12 }}{{ end -}}
          {{- $broadcastAddr := include "yugabyte.server_broadcast_address" $serviceValues -}}
          {{- $broadcastPort := index $service.ports "tcp-rpc-port" -}}
          {{- $broadcastDict := dict "Addr" $broadcastAddr "Port" $broadcastPort -}}
          {{- $broadcastPreflight := include "yugabyte.preflight_check" (set $serviceValues "Preflight" $broadcastDict) -}}
          {{- if $broadcastPreflight -}}{{ $broadcastPreflight | nindent 12 }}{{ end -}}
          {{- $webserverAddr := include "yugabyte.webserver_interface" $serviceValues -}}
          {{- $webserverPort := index $service.ports "http-ui" -}}
          {{- $webserverDict := dict "Addr" $webserverAddr "Port" $webserverPort -}}
          {{- $webserverPreflight := include "yugabyte.preflight_check" (set $serviceValues "Preflight" $webserverDict) -}}
          {{- if $webserverPreflight -}}{{ $webserverPreflight | nindent 12 }}{{ end }}
            if [[ -f /home/yugabyte/tools/k8s_parent.py ]]; then
              k8s_parent="/home/yugabyte/tools/k8s_parent.py"
            else
              k8s_parent=""
            fi && \
          {{- if eq .name "yb-masters" }}
            exec ${k8s_parent} /home/yugabyte/bin/yb-master \
            {{- if not $root.Values.storage.ephemeral }}
              --fs_data_dirs={{ template "yugabyte.fs_data_dirs" $storageInfo }} \
            {{- else }}
              --fs_data_dirs=/var/yugabyte \
            {{- end }}
            {{- if eq $root.Values.ip_version_support "v6_only" }}
              --net_address_filter=ipv6_external,ipv6_non_link_local,ipv6_all,ipv4_external,ipv4_all \
            {{- end }}
            {{- if $root.Values.isMultiAz }}
              --master_addresses={{ $root.Values.masterAddresses }} \
              --replication_factor={{ $root.Values.replicas.totalMasters }} \
            {{- else }}
              --master_addresses={{ template "yugabyte.master_addresses" $root }} \
              --replication_factor={{ $root.Values.replicas.master }} \
            {{- end }}
            {{- if not $root.Values.disableYsql }}
              --enable_ysql=true \
            {{- else }}
              --enable_ysql=false \
            {{- end }}
              --metric_node_name=$(HOSTNAME) \
              --memory_limit_hard_bytes={{ template "yugabyte.memory_hard_limit" $root.Values.resource.master }} \
              --stderrthreshold=0 \
              --num_cpus={{ ceil $root.Values.resource.master.requests.cpu }} \
              --undefok=num_cpus,enable_ysql \
            {{- range $flag, $override := $root.Values.gflags.master }}
              --{{ $flag }}={{ quote $override }} \
            {{- end }}
            {{- if $root.Values.tls.enabled }}
              --certs_dir=/opt/certs/yugabyte \
              --use_node_to_node_encryption={{ $root.Values.tls.nodeToNode }} \
              --allow_insecure_connections={{ $root.Values.tls.insecure }} \
            {{- end }}
              --rpc_bind_addresses={{ $rpcAddr }} \
              --server_broadcast_addresses={{ $broadcastAddr }} \
              --webserver_interface={{ $webserverAddr }}
          {{- else }}
            {{- $cqlAddr := include "yugabyte.cql_proxy_bind_address" $serviceValues -}}
            {{- $cqlPort := index $service.ports "tcp-yql-port" -}}
            {{- $cqlDict := dict "Addr" $cqlAddr "Port" $cqlPort -}}
            {{- $cqlPreflight := include "yugabyte.preflight_check" (set $serviceValues "Preflight" $cqlDict) -}}
            {{- if $cqlPreflight -}}{{ $cqlPreflight | nindent 12 }}{{ end -}}
            {{- $ysqlAddr := include "yugabyte.pgsql_proxy_bind_address" $serviceValues -}}
            {{- $ysqlPort := index $service.ports "tcp-ysql-port" -}}
            {{- if not $root.Values.disableYsql -}}
              {{- $ysqlDict := dict "Addr" $ysqlAddr "Port" $ysqlPort -}}
              {{- $ysqlPreflight := include "yugabyte.preflight_check" (set $serviceValues "Preflight" $ysqlDict) -}}
              {{- if $ysqlPreflight -}}{{ $ysqlPreflight | nindent 12 }}{{ end -}}
            {{- end }}
            exec ${k8s_parent} /home/yugabyte/bin/yb-tserver \
            {{- if not $root.Values.storage.ephemeral }}
              --fs_data_dirs={{ template "yugabyte.fs_data_dirs" $storageInfo }} \
            {{- else }}
              --fs_data_dirs=/var/yugabyte \
            {{- end }}
            {{- if eq $root.Values.ip_version_support "v6_only" }}
              --net_address_filter=ipv6_external,ipv6_non_link_local,ipv6_all,ipv4_external,ipv4_all \
            {{- end }}
            {{- if $root.Values.isMultiAz }}
              --tserver_master_addrs={{ $root.Values.masterAddresses }} \
            {{- else }}
              --tserver_master_addrs={{ template "yugabyte.master_addresses" $root }} \
            {{- end }}
              --metric_node_name=$(HOSTNAME) \
              --memory_limit_hard_bytes={{ template "yugabyte.memory_hard_limit" $root.Values.resource.tserver }} \
              --stderrthreshold=0 \
              --num_cpus={{ ceil $root.Values.resource.tserver.requests.cpu }} \
              --undefok=num_cpus,enable_ysql \
              --use_node_hostname_for_local_tserver=true \
            {{- if $root.Values.authCredentials.ysql.password }}
              --ysql_enable_auth=true \
            {{- end }}
            {{- if or $root.Values.authCredentials.ycql.user $root.Values.authCredentials.ycql.password }}
              --use_cassandra_authentication=true \
            {{- end }}
            {{- range $flag, $override := $root.Values.gflags.tserver }}
              --{{ $flag }}={{ quote $override }} \
            {{- end }}
            {{- if $root.Values.tls.enabled }}
              --certs_dir=/opt/certs/yugabyte \
              --use_node_to_node_encryption={{ $root.Values.tls.nodeToNode }} \
              --allow_insecure_connections={{ $root.Values.tls.insecure }} \
              --use_client_to_server_encryption={{ $root.Values.tls.clientToServer }} \
              --certs_for_client_dir=/opt/certs/yugabyte \
              {{- if $root.Values.tserver.serverBroadcastAddress }}
              --cert_node_filename={{ include "yugabyte.server_fqdn" $serviceValues }} \
              {{- end }}
            {{- end }}
              --rpc_bind_addresses={{ $rpcAddr }} \
              --server_broadcast_addresses={{ $root.Values.tserver.serverBroadcastAddress | default $broadcastAddr }} \
              --webserver_interface={{ $webserverAddr }} \
            {{- if not $root.Values.disableYsql }}
              --enable_ysql=true \
              --pgsql_proxy_bind_address={{ $ysqlAddr }} \
            {{- else }}
              --enable_ysql=false \
            {{- end }}
              --cql_proxy_bind_address={{ $cqlAddr }}
          {{- end }}
        ports:
          {{- range $label, $port := .ports }}
          - containerPort: {{ $port }}
            name: {{ $label | quote }}
          {{- end}}
        volumeMounts:
          {{ if not $root.Values.storage.ephemeral }}
          {{- range $index := until (int ($storageInfo.count)) }}
          - name: {{ $root.Values.oldNamingStyle | ternary (printf "datadir%d" $index) (printf "%s%d" (include "yugabyte.volume_name" $root) $index) }}
            mountPath: /mnt/disk{{ $index }}
          {{- end }}
          {{- end }}
          {{- if $root.Values.tls.enabled }}
          - name: {{ $root.Values.oldNamingStyle | ternary (printf "%s-yugabyte-tls-cert" .label) (printf "%s-%s-tls-cert" (include "yugabyte.fullname" $root) .label) }}
            mountPath: /opt/certs/yugabyte
            readOnly: true
          - name: {{ $root.Values.oldNamingStyle | ternary "yugabyte-tls-client-cert" (printf "%s-client-tls" (include "yugabyte.fullname" $root)) }}
            mountPath: /root/.yugabytedb/
            readOnly: true
          {{- end }}
          {{- if and (eq .name "yb-masters") ($root.Values.master.extraVolumeMounts) -}}
          {{- include "yugabyte.isExtraVolumesMappingExists" $root.Values.master -}}
          {{- $root.Values.master.extraVolumeMounts | toYaml | nindent 10 -}}
          {{- else if and (eq .name "yb-tservers") ($root.Values.tserver.extraVolumeMounts) -}}
          {{- include "yugabyte.isExtraVolumesMappingExists" $root.Values.tserver -}}
          {{- $root.Values.tserver.extraVolumeMounts | toYaml | nindent 10 -}}
          {{- end -}}

      {{ if not $root.Values.storage.ephemeral }}
      - name: yb-cleanup
        image: "{{ $root.Values.Image.repository }}:{{ $root.Values.Image.tag }}"
        imagePullPolicy: {{ $root.Values.Image.pullPolicy }}
        env:
        - name: USER
          value: "yugabyte"
        command:
          - "/sbin/tini"
          - "--"
        args:
          - "/bin/bash"
          - "-c"
          - >
            while true; do
              sleep 3600;
              /home/yugabyte/scripts/log_cleanup.sh;
            done
        volumeMounts:
          - name: {{ $root.Values.oldNamingStyle | ternary "datadir0" (printf "%s0" (include "yugabyte.volume_name" $root)) }}
            mountPath: /home/yugabyte/
            subPath: yb-data
          - name: {{ $root.Values.oldNamingStyle | ternary "datadir0" (printf "%s0" (include "yugabyte.volume_name" $root)) }}
            mountPath: /var/yugabyte/cores
            subPath: cores
      {{- end }}

      volumes:
        {{ if not $root.Values.storage.ephemeral }}
        {{- range $index := until (int ($storageInfo.count)) }}
        - name: {{ $root.Values.oldNamingStyle | ternary (printf "datadir%d" $index) (printf "%s%d" (include "yugabyte.volume_name" $root) $index) }}
          hostPath:
            path: /mnt/disks/ssd{{ $index }}
        {{- end }}
        {{- end }}
        {{- if $root.Values.tls.enabled }}
        - name: {{ $root.Values.oldNamingStyle | ternary (printf "%s-yugabyte-tls-cert" .label) (printf "%s-%s-tls-cert" (include "yugabyte.fullname" $root) .label) }}
          secret:
            secretName: {{ $root.Values.oldNamingStyle | ternary (printf "%s-yugabyte-tls-cert" .label) (printf "%s-%s-tls-cert" (include "yugabyte.fullname" $root) .label) }}
            {{- if $root.Values.tls.certManager.enabled }}
            items:
              {{- $replicas := (eq .name "yb-masters") | ternary $root.Values.replicas.master $root.Values.replicas.tserver -}}
              {{- range $index := until ( int ( $replicas ) ) }}
              {{- $nodeOldStyle := printf "%s-%d.%s.%s.svc.%s" $service.label $index $service.name $root.Release.Namespace $root.Values.domainName }}
              {{- $nodeNewStyle := printf "%s-%s-%d.%s-%s.%s.svc.%s" (include "yugabyte.fullname" $root) $service.label $index (include "yugabyte.fullname" $root) $service.name $root.Release.Namespace $root.Values.domainName }}
              {{- $node := $root.Values.oldNamingStyle | ternary $nodeOldStyle $nodeNewStyle }}
              - key: tls.crt
                path: node.{{$node}}.crt
              - key: tls.key
                path: node.{{$node}}.key
              {{- end }}
              - key: ca.crt
                path: ca.crt
            {{- end }}
            defaultMode: 256
        - name: {{ $root.Values.oldNamingStyle | ternary "yugabyte-tls-client-cert" (printf "%s-client-tls" (include "yugabyte.fullname" $root)) }}
          secret:
            secretName: {{ $root.Values.oldNamingStyle | ternary "yugabyte-tls-client-cert" (printf "%s-client-tls" (include "yugabyte.fullname" $root)) }}
            {{- if $root.Values.tls.certManager.enabled }}
            items:
              - key: ca.crt
                path: root.crt
              - key: tls.crt
                path: yugabytedb.crt
              - key: tls.key
                path: yugabytedb.key
            {{- end }}
            defaultMode: 256
        {{- end }}
        {{- if and (eq .name "yb-masters") ($root.Values.master.extraVolumes) -}}
        {{- include "yugabyte.isExtraVolumesMappingExists" $root.Values.master -}}
        {{- $root.Values.master.extraVolumes | toYaml | nindent 8 -}}
        {{- else if and (eq .name "yb-tservers") ($root.Values.tserver.extraVolumes) -}}
        {{- include "yugabyte.isExtraVolumesMappingExists" $root.Values.tserver -}}
        {{- $root.Values.tserver.extraVolumes | toYaml | nindent 8 -}}
        {{- end -}}
{{- if eq $root.Values.isMultiAz false }}
---
{{/*
TODO: switch to policy/v1 completely when we stop supporting
Kubernetes versions < 1.21
*/}}
{{- if $root.Capabilities.APIVersions.Has "policy/v1/PodDisruptionBudget" }}
apiVersion: policy/v1
{{- else }}
apiVersion: policy/v1beta1
{{- end }}
kind: PodDisruptionBudget
metadata:
  name: {{ $root.Values.oldNamingStyle | ternary (printf "%s-pdb" .label) (printf "%s-%s-pdb" (include "yugabyte.fullname" $root) .name) }}
spec:
  maxUnavailable: {{ template "yugabyte.max_unavailable_for_quorum" $root }}
  selector:
    matchLabels:
      {{- include "yugabyte.appselector" ($appLabelArgs) | indent 6 }}
{{- end }}
{{- end }}
