apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.kasmApp.name | default "kasm" }}-db-init-startup
  namespace: {{ .Release.Namespace }}
  labels:
    kasm_app: {{ .Values.kasmApp.name | default "kasm" }}-db-init
    {{- include "kasm.defaultLabels" . | indent 4 }}
  annotations:
    helm.sh/hook: pre-install,post-delete
data:
  startup.sh: |
    #!/usr/bin/env bash

    POSTGRES_USER="${POSTGRES_USER:-kasmapp}"
    DATABASE_MASTER_PASSWORD="${DATABASE_MASTER_PASSWORD:-$POSTGRES_PASSWORD}"
    DATABASE_MASTER_USER="${DATABASE_MASTER_USER:-$POSTGRES_USER}"
    POSTGRES_PORT="${POSTGRES_PORT:-5432}"
    POSTGRES_DB="${POSTGRES_DB:-kasm}"
    POSTGRES_HOST="${POSTGRES_HOST:-db}"

    function display_help() {
      echo "Usage: ${0}"
      echo "-h Display this help menu"
      echo "-c The config to pass to the shared object"
      echo "-s The shared object to execute"
    }

    function initialize_db() {

      # does the database not exist or is the database missing a required table. This will pass if there are no rows in the settings table
      PGPASSWORD="$DATABASE_MASTER_PASSWORD" psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${DATABASE_MASTER_USER}" -d "${POSTGRES_DB}" -c "SELECT COUNT(*) FROM settings;" 2>&1 > /dev/null
      ret=$?
      if [ ! $ret -eq 0 ] ; then
        echo "Initializing database."

        # Does the database exist
        PGPASSWORD="$DATABASE_MASTER_PASSWORD" psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${DATABASE_MASTER_USER}" -d "${POSTGRES_DB}" -c "\q" 2>&1 > /dev/null
        ret=$?
        if [ ! $ret -eq 0 ] ; then
          echo "Create database scheme."
          PGPASSWORD="${DATABASE_MASTER_PASSWORD}" psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${DATABASE_MASTER_USER}" -d postgres -c "CREATE DATABASE ${POSTGRES_DB} OWNER ${DATABASE_MASTER_USER}"
          PGPASSWORD="${DATABASE_MASTER_PASSWORD}" psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${DATABASE_MASTER_USER}" -d postgres -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp"'
        fi


        if [ "${DATABASE_MASTER_USER}" != "${POSTGRES_USER}" ] ; then
          echo "Creating ${POSTGRES_USER} postgres user."
          PGPASSWORD="${DATABASE_MASTER_PASSWORD}" psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${DATABASE_MASTER_USER}" -d postgres -c "CREATE USER ${POSTGRES_USER} WITH PASSWORD '${POSTGRES_PASSWORD}'"
          PGPASSWORD="${DATABASE_MASTER_PASSWORD}" psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${DATABASE_MASTER_USER}" -d postgres -c "GRANT SELECT, INSERT, UPDATE, DELETE, TRUNCATE, TRIGGER, REFERENCES, CONNECT, TEMPORARY, EXECUTE ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_USER}"
        fi

        cp /opt/kasm/current/conf/database/seed_data/default_properties.yaml /tmp/default_properties.yaml

        # Default manager token
        if [ -z "${DEFAULT_MANAGER_TOKEN}" ] ; then
          DEFAULT_MANAGER_TOKEN=$(cat /proc/sys/kernel/random/uuid)
          echo "INSTALLATION> Manager Token: $DEFAULT_MANAGER_TOKEN"
        fi
        /usr/bin/yq_$(uname -m) -i   '(.settings.[] | select(.name=="token") | select(.category == "manager")) .value = "'${DEFAULT_MANAGER_TOKEN}'"' /tmp/default_properties.yaml

        # Registration token
        if [ -z "${DEFAULT_REGISTRATION_TOKEN}" ] ; then
          DEFAULT_REGISTRATION_TOKEN=$(cat /proc/sys/kernel/random/uuid)
          echo "INSTALLATION> Registration Token: $DEFAULT_REGISTRATION_TOKEN"
        fi
        /usr/bin/yq_$(uname -m) -i   '(.settings.[] | select(.name=="registration_token") | select(.category == "auth")) .value = "'${DEFAULT_REGISTRATION_TOKEN}'"' /tmp/default_properties.yaml

        # Default Admin Password
        if [ -z "${DEFAULT_ADMIN_PASSWORD}" ] ; then
          DEFAULT_ADMIN_PASSWORD=$(cat /proc/sys/kernel/random/uuid)
          echo "INSTALLATION> Admin Password: $DEFAULT_ADMIN_PASSWORD"
        fi
        ADMIN_SALT=$(cat /proc/sys/kernel/random/uuid)
        ADMIN_HASH=$(printf ${DEFAULT_ADMIN_PASSWORD}${ADMIN_SALT} | sha256sum | cut -c-64)
        /usr/bin/yq_$(uname -m) -i  '(.users.[] | select(.username=="admin@kasm.local") | .salt) = "'${ADMIN_SALT}'"'  /tmp/default_properties.yaml
        /usr/bin/yq_$(uname -m) -i  '(.users.[] | select(.username=="admin@kasm.local") | .pw_hash) = "'${ADMIN_HASH}'"' /tmp/default_properties.yaml

        # Default User Password
        if [ -z "${DEFAULT_USER_PASSWORD}" ] ; then
          DEFAULT_USER_PASSWORD=$(cat /proc/sys/kernel/random/uuid)
          echo "INSTALLATION> User Password: $DEFAULT_USER_PASSWORD"
        fi
        USER_SALT=$(cat /proc/sys/kernel/random/uuid)
        USER_HASH=$(printf ${DEFAULT_USER_PASSWORD}${USER_SALT} | sha256sum | cut -c-64)
        /usr/bin/yq_$(uname -m) -i  '(.users.[] | select(.username=="user@kasm.local") | .salt) = "'${USER_SALT}'"'  /tmp/default_properties.yaml
        /usr/bin/yq_$(uname -m) -i  '(.users.[] | select(.username=="user@kasm.local") | .pw_hash) = "'${USER_HASH}'"'  /tmp/default_properties.yaml
        
        echo "Seeding database..."
        /usr/bin/kasm_server.so --initialize-database --cfg /opt/kasm/current/conf/app/api.app.config.yaml --populate-production --seed-file "/tmp/default_properties.yaml"

        #if [ "${POSTGRES_HOST}" == "db" ] ; then
          #echo "Setting default agent for single server installation."
          #/usr/bin/kasm_server.so --initialize-database --cfg /opt/kasm/current/conf/app/api.app.config.yaml --populate-production --seed-file "/opt/kasm/current/conf/database/seed_data/default_agents.yaml"
        #fi
      else
        echo "Database already exists."
      fi
    }

    if [ ! -z "$DB_AUTO_INITIALIZE" ]; then
      if command -v /usr/bin/psql > /dev/null; then
        echo "Database initialization configured."
        initialize_db
        exit 0
      fi
    fi

