{{- if or (eq .Values.upbound.controlPlane.permission "view") (eq .Values.upbound.controlPlane.permission "edit") }}
---
# We need to be able to read universal-crossplane-config configmap in the namespace
# where UXP is deployed to provide version/configuration information.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ template "agent-name" . }}-uxp-config
  labels:
    {{- include "labelsAgent" . | nindent 4 }}
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["universal-crossplane-config"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "agent-name" . }}-uxp-config
  labels:
    {{- include "labelsAgent" . | nindent 4 }}
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: upbound:view
{{- if eq .Values.upbound.controlPlane.permission "edit" }}
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: upbound:edit
{{- end }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ template "agent-name" . }}-uxp-config
{{- end }}
{{- if eq .Values.upbound.controlPlane.permission "edit" }}
---
# We need to be able to manage Secrets in the namespace where UXP is deployed
# so that Secrets pointed by ProviderConfig objects can be created by the agent.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ template "agent-name" . }}-secret
  labels:
    {{- include "labelsAgent" . | nindent 4 }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "agent-name" . }}-secret
  labels:
    {{- include "labelsAgent" . | nindent 4 }}
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: upbound:edit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ template "agent-name" . }}-secret
{{- end }}